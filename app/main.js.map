{"version":3,"sources":["main.js","main.ts"],"names":["exports","__esModule","electron_1","require","fs","MenuManager_1","menumanager","icons","__dirname","replace","date","Date","getMonth","specialicondifficulty","icon","appdata","process","env","APPDATA","platform","HOME","existsSync","mkdirSync","mainWindow","createWindow","BrowserWindow","width","height","apply","maximize","menu","Menu","getApplicationMenu","setMenu","loadFile","on","console","log","app","quit","Math","floor","random","files","readdirSync","index","length","ipcMain","event","_arg","returnValue","_event","arg","webContents","toggleDevTools","openDevTools","closeDevTools","dialog","showOpenDialog","properties","showMessageBox","title","buttons","alertResponse","promptResponse","promptWindow","show","resizable","movable","alwaysOnTop","frame","val","promptHtml","loadURL"],"mappings":"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","file":"main.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\n// Modules to control application life and create native browser window\nvar electron_1 = require(\"electron\");\nvar fs = require(\"fs\");\nvar MenuManager_1 = require(\"./src/scripts/MenuManager\");\nvar menumanager = new MenuManager_1[\"default\"]();\n//menumanager.pushItem(\"File\", {label:\"Save\",accelerator: 'CmdOrCtrl+S'},[0])\n//menumanager.pushItem(\"File\", {label:\"Save as\",accelerator: 'CmdOrCtrl+Shift+S'},[0])\n//require('electron-debug')({showDevTools: false}); // Debugs\nvar icons = __dirname.replace(/\\\\/g, \"/\") + \"/assets/icons/\";\nvar date = new Date();\nif (date.getMonth() == 11)\n    icons += \"christmas/\";\nvar specialicondifficulty = 100;\nvar icon = icons + \"icon.png\";\nvar appdata = process.env.APPDATA ||\n    (process.platform == \"darwin\"\n        ? process.env.HOME + \"Library/Preferences\"\n        : \"/var/local\");\nif (!fs.existsSync(appdata + \"/mcscriptStudioCode\"))\n    fs.mkdirSync(appdata + \"/mcscriptStudioCode\");\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nvar mainWindow;\nexports.mainWindow = mainWindow;\nfunction createWindow() {\n    // Create the browser window.\n    exports.mainWindow = mainWindow = new electron_1.BrowserWindow({ width: 800, height: 600, icon: icon });\n    menumanager.apply(mainWindow);\n    mainWindow.maximize();\n    // and load the index.html of the app.\n    var menu = electron_1.Menu.getApplicationMenu();\n    mainWindow.setMenu(menu);\n    mainWindow.loadFile(__dirname + \"/index.html\");\n    // Open the DevTools.\n    // mainWindow.webContents.openDevTools()\n    // Emitted when the window is closed.\n    mainWindow.on(\"closed\", function () {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.zzz\n        console.log(\"closed\");\n        exports.mainWindow = mainWindow = null;\n        electron_1.app.quit();\n    });\n}\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\nelectron_1.app.on(\"ready\", createWindow);\nif (Math.floor(Math.random() * specialicondifficulty) == 0) {\n    var files = fs.readdirSync(icons + \"special/\");\n    var index = (Math.random() * files.length) | 0;\n    icon = icons + \"special/\" + files[index];\n    console.log(\"Special icon: \" + icon);\n}\n// Quit when all windows are closed.\nelectron_1.app.on(\"window-all-closed\", function () {\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== \"darwin\") {\n        electron_1.app.quit();\n    }\n});\nelectron_1.app.on(\"activate\", function () {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        createWindow();\n    }\n});\nelectron_1.ipcMain.on(\"get_window\", function (event, _arg) {\n    event.returnValue = mainWindow;\n});\nelectron_1.ipcMain.on(\"devtools\", function (_event, arg) {\n    if (arg == \"toggle\")\n        mainWindow.webContents.toggleDevTools();\n    if (arg == \"open\")\n        mainWindow.webContents.openDevTools();\n    if (arg == \"close\")\n        mainWindow.webContents.closeDevTools();\n});\nelectron_1.ipcMain.on(\"get_folder\", function (event, arg) {\n    if (arg == \"get_folder\")\n        event.returnValue = electron_1.dialog.showOpenDialog({\n            properties: [\"openFile\", \"openDirectory\", \"multiSelections\"]\n        });\n});\nelectron_1.ipcMain.on(\"get_icon\", function (event) {\n    event.returnValue = icon;\n});\nelectron_1.ipcMain.on(\"\", function (event, arg) {\n    //@ts-ignore\n    event.returnValue = electron_1.dialog.showMessageBox(mainWindow, {\n        title: arg,\n        buttons: [\"ok\"]\n    });\n});\nvar alertResponse;\nelectron_1.ipcMain.on(\"alert\", function (event, arg) {\n    promptResponse = null;\n    var promptWindow = new electron_1.BrowserWindow({\n        width: 200,\n        height: 100,\n        show: false,\n        resizable: false,\n        movable: false,\n        alwaysOnTop: true,\n        frame: false\n    });\n    arg.val = arg.val || \"\";\n    var promptHtml = '<label for=\"val\">' +\n        arg +\n        \"</label>\\\r\n  <button onclick=\\\"require('electron').ipcRenderer.send('prompt-response', 1).value);window.close()\\\">Ok</button>\\\r\n  <button onclick=\\\"window.close()\\\">Cancel</button>\\\r\n  <style>body {font-family: sans-serif;} button {float:right; margin-left: 10px;} label,input {margin-bottom: 10px; width: 100%; display:block;}</style>\";\n    promptWindow.loadURL(\"data:text/html,\" + promptHtml);\n    promptWindow.show();\n    promptWindow.on(\"closed\", function () {\n        event.returnValue = alertResponse;\n        promptWindow = null;\n    });\n});\nelectron_1.ipcMain.on(\"alert-response\", function (_event, arg) {\n    if (arg === \"\") {\n        arg = null;\n    }\n    promptResponse = arg;\n});\nvar promptResponse;\nelectron_1.ipcMain.on(\"prompt\", function (event, arg) {\n    promptResponse = null;\n    var promptWindow = new electron_1.BrowserWindow({\n        width: 200,\n        height: 100,\n        show: false,\n        resizable: false,\n        movable: false,\n        alwaysOnTop: true,\n        frame: false\n    });\n    arg.val = arg.val || \"\";\n    var promptHtml = '<label for=\"val\">' +\n        arg.title +\n        '</label>\\\r\n  <input id=\"val\" value=\"' +\n        arg.val +\n        \"\\\" autofocus />\\\r\n  <button onclick=\\\"require('electron').ipcRenderer.send('prompt-response', document.getElementById('val').value);window.close()\\\">Ok</button>\\\r\n  <button onclick=\\\"window.close()\\\">Cancel</button>\\\r\n  <style>body {font-family: sans-serif;} button {float:right; margin-left: 10px;} label,input {margin-bottom: 10px; width: 100%; display:block;}</style>\";\n    promptWindow.loadURL(\"data:text/html,\" + promptHtml);\n    promptWindow.show();\n    promptWindow.on(\"closed\", function () {\n        event.returnValue = promptResponse;\n        promptWindow = null;\n    });\n});\nelectron_1.ipcMain.on(\"prompt-response\", function (_event, arg) {\n    if (arg === \"\") {\n        arg = null;\n    }\n    promptResponse = arg;\n});\n","// Modules to control application life and create native browser window\r\nimport { app, BrowserWindow, dialog, ipcMain, Menu, Event } from \"electron\";\r\nimport * as fs from \"fs\";\r\nimport MenuManager from \"./src/scripts/MenuManager\";\r\n\r\nlet menumanager = new MenuManager();\r\n//menumanager.pushItem(\"File\", {label:\"Save\",accelerator: 'CmdOrCtrl+S'},[0])\r\n//menumanager.pushItem(\"File\", {label:\"Save as\",accelerator: 'CmdOrCtrl+Shift+S'},[0])\r\n\r\n//require('electron-debug')({showDevTools: false}); // Debugs\r\n\r\nlet icons = __dirname.replace(/\\\\/g, \"/\") + \"/assets/icons/\";\r\nlet date: Date = new Date();\r\nif (date.getMonth() == 11) icons += \"christmas/\";\r\nlet specialicondifficulty = 100;\r\nlet icon = icons + \"icon.png\";\r\nlet appdata =\r\n  process.env.APPDATA ||\r\n  (process.platform == \"darwin\"\r\n    ? process.env.HOME + \"Library/Preferences\"\r\n    : \"/var/local\");\r\n\r\nif (!fs.existsSync(`${appdata}/mcscriptStudioCode`))\r\n  fs.mkdirSync(`${appdata}/mcscriptStudioCode`);\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow: BrowserWindow;\r\n\r\nfunction createWindow() {\r\n  // Create the browser window.\r\n  mainWindow = new BrowserWindow({ width: 800, height: 600, icon: icon });\r\n  menumanager.apply(mainWindow);\r\n  mainWindow.maximize();\r\n\r\n  // and load the index.html of the app.\r\n  let menu = Menu.getApplicationMenu();\r\n  mainWindow.setMenu(menu);\r\n  mainWindow.loadFile(__dirname + \"/index.html\");\r\n\r\n  // Open the DevTools.\r\n  // mainWindow.webContents.openDevTools()\r\n\r\n  // Emitted when the window is closed.\r\n  mainWindow.on(\"closed\", function() {\r\n    // Dereference the window object, usually you would store windows\r\n    // in an array if your app supports multi windows, this is the time\r\n    // when you should delete the corresponding element.zzz\r\n    console.log(\"closed\");\r\n    mainWindow = null;\r\n    app.quit();\r\n  });\r\n}\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on(\"ready\", createWindow);\r\n\r\nif (Math.floor(Math.random() * specialicondifficulty) == 0) {\r\n  let files = fs.readdirSync(icons + \"special/\");\r\n  let index = (Math.random() * files.length) | 0;\r\n  icon = icons + \"special/\" + files[index];\r\n  console.log(\"Special icon: \" + icon);\r\n}\r\n\r\n// Quit when all windows are closed.\r\napp.on(\"window-all-closed\", function() {\r\n  // On OS X it is common for applications and their menu bar\r\n  // to stay active until the user quits explicitly with Cmd + Q\r\n  if (process.platform !== \"darwin\") {\r\n    app.quit();\r\n  }\r\n});\r\n\r\napp.on(\"activate\", function() {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (mainWindow === null) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\nipcMain.on(\"get_window\", (event: Event, _arg) => {\r\n  event.returnValue = mainWindow;\r\n});\r\n\r\nipcMain.on(\"devtools\", (_event: Event, arg) => {\r\n  if (arg == \"toggle\") mainWindow.webContents.toggleDevTools();\r\n  if (arg == \"open\") mainWindow.webContents.openDevTools();\r\n  if (arg == \"close\") mainWindow.webContents.closeDevTools();\r\n});\r\n\r\nipcMain.on(\"get_folder\", (event: Event, arg) => {\r\n  if (arg == \"get_folder\")\r\n    event.returnValue = dialog.showOpenDialog({\r\n      properties: [\"openFile\", \"openDirectory\", \"multiSelections\"]\r\n    });\r\n});\r\n\r\nipcMain.on(\"get_icon\", (event: Event) => {\r\n  event.returnValue = icon;\r\n});\r\n\r\nipcMain.on(\"\", (event: Event, arg) => {\r\n  //@ts-ignore\r\n  event.returnValue = dialog.showMessageBox(mainWindow, {\r\n    title: <string>arg,\r\n    buttons: [\"ok\"]\r\n  });\r\n});\r\n\r\nvar alertResponse: any;\r\nipcMain.on(\"alert\", function(event, arg) {\r\n  promptResponse = null;\r\n  var promptWindow = new BrowserWindow({\r\n    width: 200,\r\n    height: 100,\r\n    show: false,\r\n    resizable: false,\r\n    movable: false,\r\n    alwaysOnTop: true,\r\n    frame: false\r\n  });\r\n  arg.val = arg.val || \"\";\r\n  const promptHtml =\r\n    '<label for=\"val\">' +\r\n    arg +\r\n    \"</label>\\\r\n  <button onclick=\\\"require('electron').ipcRenderer.send('prompt-response', 1).value);window.close()\\\">Ok</button>\\\r\n  <button onclick=\\\"window.close()\\\">Cancel</button>\\\r\n  <style>body {font-family: sans-serif;} button {float:right; margin-left: 10px;} label,input {margin-bottom: 10px; width: 100%; display:block;}</style>\";\r\n  promptWindow.loadURL(\"data:text/html,\" + promptHtml);\r\n  promptWindow.show();\r\n  promptWindow.on(\"closed\", function() {\r\n    event.returnValue = alertResponse;\r\n    promptWindow = null;\r\n  });\r\n});\r\nipcMain.on(\"alert-response\", function(_event, arg) {\r\n  if (arg === \"\") {\r\n    arg = null;\r\n  }\r\n  promptResponse = arg;\r\n});\r\n\r\nvar promptResponse: any;\r\nipcMain.on(\"prompt\", function(event, arg) {\r\n  promptResponse = null;\r\n  var promptWindow = new BrowserWindow({\r\n    width: 200,\r\n    height: 100,\r\n    show: false,\r\n    resizable: false,\r\n    movable: false,\r\n    alwaysOnTop: true,\r\n    frame: false\r\n  });\r\n  arg.val = arg.val || \"\";\r\n  const promptHtml =\r\n    '<label for=\"val\">' +\r\n    arg.title +\r\n    '</label>\\\r\n  <input id=\"val\" value=\"' +\r\n    arg.val +\r\n    \"\\\" autofocus />\\\r\n  <button onclick=\\\"require('electron').ipcRenderer.send('prompt-response', document.getElementById('val').value);window.close()\\\">Ok</button>\\\r\n  <button onclick=\\\"window.close()\\\">Cancel</button>\\\r\n  <style>body {font-family: sans-serif;} button {float:right; margin-left: 10px;} label,input {margin-bottom: 10px; width: 100%; display:block;}</style>\";\r\n  promptWindow.loadURL(\"data:text/html,\" + promptHtml);\r\n  promptWindow.show();\r\n  promptWindow.on(\"closed\", function() {\r\n    event.returnValue = promptResponse;\r\n    promptWindow = null;\r\n  });\r\n});\r\nipcMain.on(\"prompt-response\", function(_event, arg) {\r\n  if (arg === \"\") {\r\n    arg = null;\r\n  }\r\n  promptResponse = arg;\r\n});\r\n\r\n//app.commandLine.appendSwitch('remote-debugging-port', '8315');\r\n//app.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1');\r\n\r\nexport { mainWindow };\r\n"]}