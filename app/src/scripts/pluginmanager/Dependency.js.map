{"version":3,"sources":["Dependency.js","Dependency.ts"],"names":["exports","__esModule","fs","require","PluginManager_1","Dependency","name","url","plugindir","requiredBy","existsSync","PluginManager","instance","installPlugin","plugin","loadPlugin","Error"],"mappings":"AAAA;;AACAA,QAAQC,UAAR,GAAqB,IAArB;ACDA,IAAAC,KAAAC,QAAA,IAAA,CAAA;AACA,IAAAC,kBAAAD,QAAA,iBAAA,CAAA;AAEA;;;;;;;;;;;;AAYA,IAAAE,aAAA,aAAA,YAAA;AAwCE;;;;;;;;;;;;;AAaA,aAAAA,UAAA,CACEC,IADF,EAEEC,GAFF,EAGEC,SAHF,EAIEC,UAJF,EAIoB;AAElB,aAAKH,IAAL,GAAYA,IAAZ;AACA,aAAKC,GAAL,GAAWA,GAAX;AACA,YAAI,CAACL,GAAGQ,UAAH,CAAiBF,YAAS,GAAT,GAAaF,IAAb,GAAiB,GAAlC,CAAL,EACEF,gBAAAO,aAAA,CAAcC,QAAd,CAAuBC,aAAvB,CAAqCN,GAArC,EAA0CC,SAA1C;AACF,YAAIN,GAAGQ,UAAH,CAAiBF,YAAS,GAAT,GAAaF,IAAb,GAAiB,GAAlC,CAAJ,EACE,KAAKQ,MAAL,GAAcV,gBAAAO,aAAA,CAAcC,QAAd,CAAuBG,UAAvB,CAAkCP,SAAlC,EAA6CF,IAA7C,CAAd,CADF,KAGE,MAAM,IAAIU,KAAJ,CACJ,oBAAkBV,IAAlB,GAAsB,MAAtB,GAA6BG,UAA7B,GAAuC,uBADnC,CAAN;AAGH;AACH,WAAAJ,UAAA;AAtEA,CAAA,EAAA;AAyESL,QAAAK,UAAA,GAAAA,UAAA;AADTL,QAAA,SAAA,IAAeK,UAAf","file":"Dependency.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar fs = require(\"fs\");\nvar PluginManager_1 = require(\"./PluginManager\");\n/**\n * @class Dependency\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.3\n * @version 0.0.3\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description the dependency definition\n * @abstract\n *\n */\nvar Dependency = /** @class */ (function () {\n    /**\n     * @function constructor\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.3\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Constructor for the Dependency class\n     * @param name the plugin's name\n     * @param url the plugin's url\n     *\n     */\n    function Dependency(name, url, plugindir, requiredBy) {\n        this.name = name;\n        this.url = url;\n        if (!fs.existsSync(plugindir + \"/\" + name + \"/\"))\n            PluginManager_1.PluginManager.instance.installPlugin(url, plugindir);\n        if (fs.existsSync(plugindir + \"/\" + name + \"/\"))\n            this.plugin = PluginManager_1.PluginManager.instance.loadPlugin(plugindir, name);\n        else\n            throw new Error(\"The dependency \" + name + \" in \" + requiredBy + \" has an wrong import!\");\n    }\n    return Dependency;\n}());\nexports.Dependency = Dependency;\nexports[\"default\"] = Dependency;\n","import * as fs from \"fs\";\r\nimport { PluginManager } from \"./PluginManager\";\r\n\r\n/**\r\n * @class Dependency\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.3\r\n * @version 0.0.3\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description the dependency definition\r\n * @abstract\r\n *\r\n */\r\nclass Dependency {\r\n  /**\r\n   * @var name\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the dependencies name\r\n   *\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * @var name\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the dependencies name\r\n   *\r\n   */\r\n  url: string;\r\n\r\n  /**\r\n   * @var plugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin\r\n   *\r\n   */\r\n  plugin: Plugin;\r\n\r\n  /**\r\n   * @function constructor\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Constructor for the Dependency class\r\n   * @param name the plugin's name\r\n   * @param url the plugin's url\r\n   *\r\n   */\r\n  constructor(\r\n    name: string,\r\n    url: string,\r\n    plugindir: string,\r\n    requiredBy: string\r\n  ) {\r\n    this.name = name;\r\n    this.url = url;\r\n    if (!fs.existsSync(`${plugindir}/${name}/`))\r\n      PluginManager.instance.installPlugin(url, plugindir);\r\n    if (fs.existsSync(`${plugindir}/${name}/`))\r\n      this.plugin = PluginManager.instance.loadPlugin(plugindir, name);\r\n    else\r\n      throw new Error(\r\n        `The dependency ${name} in ${requiredBy} has an wrong import!`\r\n      );\r\n  }\r\n}\r\n\r\nexport default Dependency;\r\nexport { Dependency };\r\n"]}