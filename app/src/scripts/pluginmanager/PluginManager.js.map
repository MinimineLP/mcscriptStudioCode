{"version":3,"sources":["PluginManager.js","PluginManager.ts"],"names":["exports","__esModule","fs","require","npmi","extract","SiteAPI","PluginApi_1","Dependency_1","Util","PluginManager","instance","plugins","api","prototype","readyPluginDir","plugindir","existsSync","mkdirSync","deleteFolderRecursive","copyFolderRecursiveSync","__dirname","readyPlugin","plugin","callback","node_modules","dir","options","path","forceInstall","npmLoad","loglevel","production","err","code","LOAD_ERR","console","log","INSTALL_ERR","message","e","printStackTrace","loadPlugins","THIS","getPlugins","x","forEach","i","ready","b","push","loadPlugin","Error","desc","getPluginDescription","name","url","author","version","main","author_url","dependencies","pluginDependencies","installPlugin","dependency","Plugin","setupPlugins","_i","_a","length","setup","startPlugins","start","stopPlugins","stop","reloadPlugins","reload","JSON","parse","readFileSync","toString","error","ret","readdirSync","lstatSync","isDirectory","toLowerCase","fireEvent","event","pluginfolder","loadSite","parseURL","res","zipfile_1","downloadFile","versions","newestversion","then","unlinkSync"],"mappings":"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","file":"PluginManager.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar fs = require(\"fs\");\nvar npmi = require(\"npmi\");\nvar extract = require(\"extract-zip\");\nvar SiteAPI = require(\"../SiteApi\");\nvar PluginApi_1 = require(\"./PluginApi\");\nvar Dependency_1 = require(\"./Dependency\");\nvar Util = require(\"../util\");\n/**\n * @class PluginManager\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.2\n * @version 0.0.3\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description The manager for the plugins\n *\n */\nvar PluginManager = /** @class */ (function () {\n    /**\n     * @function constructor\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Constructor for Class PluginManager\n     *\n     */\n    function PluginManager() {\n        PluginManager.instance = this;\n        this.plugins = [];\n        this.api = new PluginApi_1[\"default\"](this);\n    }\n    /**\n     * @function readyPluginDir\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.3\n     * @version 0.0.3\n     * @license MIT\n     *\n     * @copyright (c) Minimine 2018\n     * @description makes the plugins ready\n     *\n     */\n    PluginManager.prototype.readyPluginDir = function (plugindir) {\n        if (!fs.existsSync(plugindir + \"/node_modules\"))\n            fs.mkdirSync(plugindir + \"/node_modules\");\n        if (fs.existsSync(plugindir + \"/node_modules/@mcscriptstudiocode\"))\n            Util.deleteFolderRecursive(plugindir + \"/node_modules/@mcscriptstudiocode\");\n        Util.copyFolderRecursiveSync(__dirname + \"/../../../types/@mcscriptstudiocode\", plugindir + \"/node_modules\");\n        if (fs.existsSync(plugindir + \"/node_modules/mcscriptstudiocode\"))\n            Util.deleteFolderRecursive(plugindir + \"/node_modules/mcscriptstudiocode\");\n        Util.copyFolderRecursiveSync(__dirname + \"/../../../types/mcscriptstudiocode\", plugindir + \"/node_modules\");\n        if (fs.existsSync(plugindir + \"/node_modules/@mcscriptstudiocodeplugins\"))\n            Util.deleteFolderRecursive(plugindir + \"/node_modules/@mcscriptstudiocodeplugins\");\n        fs.mkdirSync(plugindir + \"/node_modules/@mcscriptstudiocodeplugins\");\n    };\n    /**\n     * @function readyPlugin\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.3\n     * @version 0.0.3\n     * @license MIT\n     *\n     * @copyright (c) Minimine 2018\n     * @description makes a plugin ready\n     *\n     */\n    PluginManager.prototype.readyPlugin = function (plugindir, plugin, callback) {\n        if (callback === void 0) { callback = function () { }; }\n        try {\n            if (fs.existsSync(plugindir + \"/\" + plugin + \"/types\")) {\n                var node_modules = plugindir + \"/node_modules\";\n                if (!fs.existsSync(node_modules))\n                    fs.mkdirSync(node_modules);\n                if (!fs.existsSync(node_modules + \"/@mcscriptstudiocodeplugins\"))\n                    fs.mkdirSync(node_modules + \"/@mcscriptstudiocodeplugins\");\n                var dir = node_modules + \"/@mcscriptstudiocodeplugins/\" + plugin;\n                if (fs.existsSync(dir))\n                    Util.deleteFolderRecursive(dir);\n                fs.mkdirSync(dir);\n                Util.copyFolderRecursiveSync(plugindir + \"/\" + plugin + \"/types\", dir, false);\n            }\n            if (!fs.existsSync(plugindir + \"/\" + plugin))\n                return;\n            var options = {\n                path: plugindir + \"/\" + plugin,\n                forceInstall: false,\n                npmLoad: {\n                    loglevel: \"silent\",\n                    production: \"true\"\n                }\n            };\n            npmi(options, function (err) {\n                if (err) {\n                    if (callback)\n                        callback(err);\n                    if (err.code === npmi.LOAD_ERR)\n                        console.log(\"npm load error\");\n                    else if (err.code === npmi.INSTALL_ERR)\n                        console.log(\"npm install error\");\n                    return console.log(err.message);\n                }\n                if (callback)\n                    callback();\n                // installed\n                // console.log(\"Installed dependencies successfully in \" + Path.resolve(options.path));\n            });\n        }\n        catch (e) {\n            callback(e);\n            e.printStackTrace();\n        }\n    };\n    /**\n     * @function loadPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     *\n     * @copyright (c) Minimine 2018\n     * @description Loads the plugins\n     *\n     */\n    PluginManager.prototype.loadPlugins = function (plugindir, callback) {\n        if (callback === void 0) { callback = function () { }; }\n        var THIS = this;\n        if (!fs.existsSync(plugindir))\n            fs.mkdirSync(plugindir);\n        var plugins = this.getPlugins(plugindir);\n        var x = [];\n        plugins.forEach(function (e, i) {\n            x[i] = false;\n            THIS.readyPlugin(plugindir, e, function () {\n                x[i] = true;\n                var ready = true;\n                x.forEach(function (b) {\n                    if (!b)\n                        ready = false;\n                });\n                if (ready) {\n                    plugins.forEach(function (e) {\n                        THIS.plugins.push(THIS.loadPlugin(plugindir, e));\n                    });\n                    if (callback)\n                        callback();\n                }\n            });\n        });\n    };\n    /**\n     * @function loadPlugin\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Loads a Plugin\n     * @param plugin the Plugin to load\n     * @return the plugin main file default class\n     *\n     */\n    PluginManager.prototype.loadPlugin = function (plugindir, plugin) {\n        if (!fs.existsSync(plugindir + \"/\" + plugin + \"/\"))\n            throw new Error(\"Plugin \" + plugin + \" does not exists in plugindir \" + plugindir);\n        if (fs.existsSync(plugindir + \"/\" + plugin + \"/types\")) {\n            var node_modules = plugindir + \"/node_modules\";\n            if (!fs.existsSync(node_modules))\n                fs.mkdirSync(node_modules);\n            if (!fs.existsSync(node_modules + \"/@mcscriptstudiocodeplugins\"))\n                fs.mkdirSync(node_modules + \"/@mcscriptstudiocodeplugins\");\n            var dir = node_modules + \"/@mcscriptstudiocodeplugins/\" + plugin;\n            if (fs.existsSync(dir))\n                Util.deleteFolderRecursive(dir);\n            fs.mkdirSync(dir);\n            Util.copyFolderRecursiveSync(plugindir + \"/\" + plugin + \"/types\", dir, false);\n        }\n        var desc = this.getPluginDescription(plugindir, plugin);\n        var name = desc.name, url = desc.url, author = desc.author, version = desc.version, main = desc.main, author_url = desc[\"author-url\"];\n        var dependencies = [];\n        if (desc.pluginDependencies) {\n            for (var i in desc.pluginDependencies) {\n                if (!fs.existsSync(plugindir + \"/\" + desc.pluginDependencies[i].name)) {\n                    console.log(\"installing plugin \" +\n                        desc.pluginDependencies[i].name +\n                        ' from \"' +\n                        desc.pluginDependencies[i].url +\n                        '\" caused of a dependency of plugin \"' +\n                        name +\n                        '\"');\n                    this.installPlugin(desc.pluginDependencies[i].url, plugindir);\n                }\n                var dependency = new Dependency_1[\"default\"](desc.pluginDependencies[i].name, desc.pluginDependencies[i].url, plugindir, name);\n                dependencies.push(dependency);\n            }\n        }\n        if (!fs.existsSync(plugindir + \"/\" + plugin + \"/\" + main))\n            throw new Error(\"Plugin main from plugin \" + plugin + \" does not exists\");\n        var Plugin = require(plugindir + \"/\" + plugin + \"/\" + main)[\"default\"];\n        return new Plugin(name, url, author, author_url, version, main, dependencies, plugindir + \"/\" + plugin, this.api);\n    };\n    /**\n     * @function setupPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description setups the plugins\n     *\n     */\n    PluginManager.prototype.setupPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.setup();\n        }\n    };\n    /**\n     * @function startPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Starts the plugins\n     *\n     */\n    PluginManager.prototype.startPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.start();\n        }\n    };\n    /**\n     * @function stopPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description stops the plugins\n     *\n     */\n    PluginManager.prototype.stopPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.stop();\n        }\n    };\n    /**\n     * @function reloadPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description reloads the plugins\n     *\n     */\n    PluginManager.prototype.reloadPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.reload();\n        }\n    };\n    /**\n     * @function getPluginDescription\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description returns the description of a plugin\n     * @param plugin the Plugin to load\n     * @return the package.json content\n     *\n     */\n    PluginManager.prototype.getPluginDescription = function (plugindir, plugin) {\n        try {\n            return JSON.parse(fs.readFileSync(plugindir + \"/\" + plugin + \"/package.json\").toString());\n        }\n        catch (e) {\n            console.error(\"Error reading plugindescription of plugin \" + plugin + \": \", e);\n            return {};\n        }\n    };\n    /**\n     * @function getPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description scans for plugins in the plugindir\n     * @return the plugins in the plugindir\n     *\n     */\n    PluginManager.prototype.getPlugins = function (plugindir) {\n        var ret = [];\n        for (var _i = 0, _a = fs.readdirSync(plugindir); _i < _a.length; _i++) {\n            var i = _a[_i];\n            if (fs.lstatSync(plugindir + \"/\" + i).isDirectory() &&\n                i.toLowerCase() != \"node_modules\")\n                ret.push(i);\n        }\n        return ret;\n    };\n    /**\n     * @function fireEvent\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     * @description register a listener\n     *\n     * @param event the Event to fire\n     */\n    PluginManager.prototype.fireEvent = function (event) {\n        return this.api.fireEvent(event);\n    };\n    /**\n     * @function installPlugin\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     * @description install a plugin (by url into pluginfolder)\n     *\n     * @param url the url\n     * @param pluginfolder the pluginfoder\n     */\n    PluginManager.prototype.installPlugin = function (url, pluginfolder, callback) {\n        if (callback === void 0) { callback = function () { }; }\n        var THIS = this;\n        var ret = false;\n        SiteAPI.loadSite(SiteAPI.parseURL(url), function (res) {\n            res = JSON.parse(res);\n            if (!fs.existsSync(pluginfolder + \"/\" + res.name)) {\n                ret = true;\n                var zipfile_1 = pluginfolder + \"/\" + res.name.toLowerCase() + \".tmp.zip\";\n                SiteAPI.downloadFile(zipfile_1, res.versions[res.newestversion]).then(function () {\n                    extract(zipfile_1, { dir: pluginfolder + \"/\" + res.name.toLowerCase() }, function (err) {\n                        if (err)\n                            console.error(\"Error installing plugin \" + res.name + \" from url \" + url, err);\n                        else {\n                            fs.unlinkSync(zipfile_1);\n                            THIS.readyPlugin(pluginfolder, res.name, function () {\n                                callback(null, true);\n                            });\n                        }\n                    });\n                });\n            }\n            else {\n                callback(null, false);\n            }\n        });\n        return ret;\n    };\n    return PluginManager;\n}());\nexports.PluginManager = PluginManager;\nexports[\"default\"] = PluginManager;\n","import * as fs from \"fs\";\r\nimport * as npmi from \"npmi\";\r\nimport * as extract from \"extract-zip\";\r\nimport * as SiteAPI from \"../SiteApi\";\r\nimport PluginApi from \"./PluginApi\";\r\nimport Plugin from \"./Plugin\";\r\nimport Dependency from \"./Dependency\";\r\nimport Event from \"./events/Event\";\r\nimport * as Util from \"../util\";\r\n\r\n/**\r\n * @class PluginManager\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.2\r\n * @version 0.0.3\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description The manager for the plugins\r\n *\r\n */\r\nclass PluginManager {\r\n  static instance: PluginManager;\r\n\r\n  /**\r\n   * @var plugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The loaded plugins\r\n   *\r\n   */\r\n  plugins: Plugin[];\r\n\r\n  /**\r\n   * @var api\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The api\r\n   *\r\n   */\r\n  api: PluginApi;\r\n\r\n  /**\r\n   * @function constructor\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Constructor for Class PluginManager\r\n   *\r\n   */\r\n  constructor() {\r\n    PluginManager.instance = this;\r\n    this.plugins = [];\r\n    this.api = new PluginApi(this);\r\n  }\r\n\r\n  /**\r\n   * @function readyPluginDir\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   *\r\n   * @copyright (c) Minimine 2018\r\n   * @description makes the plugins ready\r\n   *\r\n   */\r\n  readyPluginDir(plugindir: string): void {\r\n    if (!fs.existsSync(`${plugindir}/node_modules`))\r\n      fs.mkdirSync(`${plugindir}/node_modules`);\r\n    if (fs.existsSync(`${plugindir}/node_modules/@mcscriptstudiocode`))\r\n      Util.deleteFolderRecursive(\r\n        `${plugindir}/node_modules/@mcscriptstudiocode`\r\n      );\r\n    Util.copyFolderRecursiveSync(\r\n      __dirname + \"/../../../types/@mcscriptstudiocode\",\r\n      `${plugindir}/node_modules`\r\n    );\r\n    if (fs.existsSync(`${plugindir}/node_modules/mcscriptstudiocode`))\r\n      Util.deleteFolderRecursive(\r\n        `${plugindir}/node_modules/mcscriptstudiocode`\r\n      );\r\n    Util.copyFolderRecursiveSync(\r\n      __dirname + \"/../../../types/mcscriptstudiocode\",\r\n      `${plugindir}/node_modules`\r\n    );\r\n    if (fs.existsSync(`${plugindir}/node_modules/@mcscriptstudiocodeplugins`))\r\n      Util.deleteFolderRecursive(\r\n        `${plugindir}/node_modules/@mcscriptstudiocodeplugins`\r\n      );\r\n    fs.mkdirSync(`${plugindir}/node_modules/@mcscriptstudiocodeplugins`);\r\n  }\r\n\r\n  /**\r\n   * @function readyPlugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   *\r\n   * @copyright (c) Minimine 2018\r\n   * @description makes a plugin ready\r\n   *\r\n   */\r\n  readyPlugin(\r\n    plugindir: string,\r\n    plugin: string,\r\n    callback: Util.CallbackFunction = function() {}\r\n  ) {\r\n    try {\r\n      if (fs.existsSync(`${plugindir}/${plugin}/types`)) {\r\n        let node_modules = `${plugindir}/node_modules`;\r\n        if (!fs.existsSync(node_modules)) fs.mkdirSync(node_modules);\r\n        if (!fs.existsSync(`${node_modules}/@mcscriptstudiocodeplugins`))\r\n          fs.mkdirSync(`${node_modules}/@mcscriptstudiocodeplugins`);\r\n        let dir = `${node_modules}/@mcscriptstudiocodeplugins/${plugin}`;\r\n        if (fs.existsSync(dir)) Util.deleteFolderRecursive(dir);\r\n        fs.mkdirSync(dir);\r\n        Util.copyFolderRecursiveSync(\r\n          `${plugindir}/${plugin}/types`,\r\n          dir,\r\n          false\r\n        );\r\n      }\r\n      if (!fs.existsSync(`${plugindir}/${plugin}`)) return;\r\n      var options = {\r\n        path: `${plugindir}/${plugin}`,\r\n        forceInstall: false,\r\n        npmLoad: {\r\n          loglevel: \"silent\",\r\n          production: \"true\"\r\n        }\r\n      };\r\n      npmi(options, function(err) {\r\n        if (err) {\r\n          if (callback) callback(err);\r\n          if (err.code === npmi.LOAD_ERR) console.log(\"npm load error\");\r\n          else if (err.code === npmi.INSTALL_ERR)\r\n            console.log(\"npm install error\");\r\n          return console.log(err.message);\r\n        }\r\n\r\n        if (callback) callback();\r\n\r\n        // installed\r\n        // console.log(\"Installed dependencies successfully in \" + Path.resolve(options.path));\r\n      });\r\n    } catch (e) {\r\n      callback(e);\r\n      e.printStackTrace();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function loadPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   *\r\n   * @copyright (c) Minimine 2018\r\n   * @description Loads the plugins\r\n   *\r\n   */\r\n  loadPlugins(\r\n    plugindir: string,\r\n    callback: Util.CallbackFunction = function() {}\r\n  ): void {\r\n    let THIS = this;\r\n    if (!fs.existsSync(plugindir)) fs.mkdirSync(plugindir);\r\n    let plugins = this.getPlugins(plugindir);\r\n    let x: boolean[] = [];\r\n    plugins.forEach((e, i) => {\r\n      x[i] = false;\r\n      THIS.readyPlugin(plugindir, e, function() {\r\n        x[i] = true;\r\n        let ready = true;\r\n        x.forEach(b => {\r\n          if (!b) ready = false;\r\n        });\r\n        if (ready) {\r\n          plugins.forEach(e => {\r\n            THIS.plugins.push(THIS.loadPlugin(plugindir, e));\r\n          });\r\n          if (callback) callback();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @function loadPlugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Loads a Plugin\r\n   * @param plugin the Plugin to load\r\n   * @return the plugin main file default class\r\n   *\r\n   */\r\n  loadPlugin(plugindir: string, plugin: string): Plugin {\r\n    if (!fs.existsSync(`${plugindir}/${plugin}/`))\r\n      throw new Error(\r\n        `Plugin ${plugin} does not exists in plugindir ${plugindir}`\r\n      );\r\n\r\n    if (fs.existsSync(`${plugindir}/${plugin}/types`)) {\r\n      let node_modules = `${plugindir}/node_modules`;\r\n      if (!fs.existsSync(node_modules)) fs.mkdirSync(node_modules);\r\n      if (!fs.existsSync(`${node_modules}/@mcscriptstudiocodeplugins`))\r\n        fs.mkdirSync(`${node_modules}/@mcscriptstudiocodeplugins`);\r\n      let dir = `${node_modules}/@mcscriptstudiocodeplugins/${plugin}`;\r\n      if (fs.existsSync(dir)) Util.deleteFolderRecursive(dir);\r\n      fs.mkdirSync(dir);\r\n      Util.copyFolderRecursiveSync(`${plugindir}/${plugin}/types`, dir, false);\r\n    }\r\n\r\n    let desc = this.getPluginDescription(plugindir, plugin);\r\n    let { name, url, author, version, main } = desc,\r\n      author_url = desc[\"author-url\"];\r\n    let dependencies: Dependency[] = [];\r\n    if (desc.pluginDependencies) {\r\n      for (let i in desc.pluginDependencies) {\r\n        if (!fs.existsSync(plugindir + \"/\" + desc.pluginDependencies[i].name)) {\r\n          console.log(\r\n            \"installing plugin \" +\r\n              desc.pluginDependencies[i].name +\r\n              ' from \"' +\r\n              desc.pluginDependencies[i].url +\r\n              '\" caused of a dependency of plugin \"' +\r\n              name +\r\n              '\"'\r\n          );\r\n          this.installPlugin(desc.pluginDependencies[i].url, plugindir);\r\n        }\r\n\r\n        var dependency: Dependency = new Dependency(\r\n          desc.pluginDependencies[i].name,\r\n          desc.pluginDependencies[i].url,\r\n          plugindir,\r\n          name\r\n        );\r\n        dependencies.push(dependency);\r\n      }\r\n    }\r\n    if (!fs.existsSync(`${plugindir}/${plugin}/${main}`))\r\n      throw new Error(`Plugin main from plugin ${plugin} does not exists`);\r\n    let Plugin = require(`${plugindir}/${plugin}/${main}`).default;\r\n    return new Plugin(\r\n      name,\r\n      url,\r\n      author,\r\n      author_url,\r\n      version,\r\n      main,\r\n      dependencies,\r\n      `${plugindir}/${plugin}`,\r\n      this.api\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @function setupPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description setups the plugins\r\n   *\r\n   */\r\n  setupPlugins(): void {\r\n    for (let plugin of this.plugins) plugin.setup();\r\n  }\r\n\r\n  /**\r\n   * @function startPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Starts the plugins\r\n   *\r\n   */\r\n  startPlugins(): void {\r\n    for (let plugin of this.plugins) plugin.start();\r\n  }\r\n\r\n  /**\r\n   * @function stopPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description stops the plugins\r\n   *\r\n   */\r\n  stopPlugins(): void {\r\n    for (let plugin of this.plugins) plugin.stop();\r\n  }\r\n\r\n  /**\r\n   * @function reloadPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description reloads the plugins\r\n   *\r\n   */\r\n  reloadPlugins(): void {\r\n    for (let plugin of this.plugins) plugin.reload();\r\n  }\r\n\r\n  /**\r\n   * @function getPluginDescription\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description returns the description of a plugin\r\n   * @param plugin the Plugin to load\r\n   * @return the package.json content\r\n   *\r\n   */\r\n  getPluginDescription(plugindir: string, plugin: string): any {\r\n    try {\r\n      return JSON.parse(\r\n        fs.readFileSync(`${plugindir}/${plugin}/package.json`).toString()\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Error reading plugindescription of plugin \" + plugin + \": \",\r\n        e\r\n      );\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function getPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description scans for plugins in the plugindir\r\n   * @return the plugins in the plugindir\r\n   *\r\n   */\r\n  getPlugins(plugindir): string[] {\r\n    let ret = [];\r\n    for (let i of fs.readdirSync(plugindir)) {\r\n      if (\r\n        fs.lstatSync(plugindir + \"/\" + i).isDirectory() &&\r\n        i.toLowerCase() != \"node_modules\"\r\n      )\r\n        ret.push(i);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @function fireEvent\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   * @description register a listener\r\n   *\r\n   * @param event the Event to fire\r\n   */\r\n  fireEvent(event: Event): Event {\r\n    return this.api.fireEvent(event);\r\n  }\r\n\r\n  /**\r\n   * @function installPlugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   * @description install a plugin (by url into pluginfolder)\r\n   *\r\n   * @param url the url\r\n   * @param pluginfolder the pluginfoder\r\n   */\r\n  installPlugin(\r\n    url: string,\r\n    pluginfolder: string,\r\n    callback: Util.CallbackFunction = function() {}\r\n  ): boolean {\r\n    let THIS = this;\r\n    let ret = false;\r\n    SiteAPI.loadSite(SiteAPI.parseURL(url), function(res) {\r\n      res = JSON.parse(res);\r\n      if (!fs.existsSync(pluginfolder + \"/\" + res.name)) {\r\n        ret = true;\r\n        let zipfile: string = `${pluginfolder}/${res.name.toLowerCase()}.tmp.zip`;\r\n        SiteAPI.downloadFile(zipfile, res.versions[res.newestversion]).then(\r\n          function() {\r\n            extract(\r\n              zipfile,\r\n              { dir: `${pluginfolder}/${res.name.toLowerCase()}` },\r\n              function(err) {\r\n                if (err)\r\n                  console.error(\r\n                    \"Error installing plugin \" + res.name + \" from url \" + url,\r\n                    err\r\n                  );\r\n                else {\r\n                  fs.unlinkSync(zipfile);\r\n                  THIS.readyPlugin(pluginfolder, res.name, function() {\r\n                    callback(null, true);\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n      } else {\r\n        callback(null, false);\r\n      }\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n\r\nexport default PluginManager;\r\nexport { PluginManager };\r\n"]}