{"version":3,"sources":["MenuManager.js","MenuManager.ts"],"names":["exports","__esModule","electron_1","require","main_1","defaulttemplate","label","submenu","accelerator","click","mainWindow","webContents","send","close","role","type","item","focusedWindow","reload","process","platform","toggleDevTools","shell","openExternal","name_1","app","getName","unshift","push","MenuManager","template","this","prototype","getMenu","Menu","buildFromTemplate","apply","window","setApplicationMenu","pushItem","path","itemOptions","indexes","console","warn","arr","value","indexesindex","split","subs","created","i","length","alreadyExists","c","indexOf","splice","ItemOptions"],"mappings":"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","file":"MenuManager.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar electron_1 = require(\"electron\");\nvar main_1 = require(\"../../main\");\nvar defaulttemplate = [\n    {\n        label: 'File',\n        submenu: [\n            {\n                label: 'Save',\n                accelerator: 'CmdOrCtrl+S',\n                click: function () { main_1.mainWindow.webContents.send('menu_action', 'file.save'); }\n            },\n            {\n                label: 'Save as',\n                accelerator: 'CmdOrCtrl+Shift+S',\n                click: function () { main_1.mainWindow.webContents.send('menu_action', 'file.save_as'); }\n            },\n            {\n                label: 'New File',\n                accelerator: 'CmdOrCtrl+N',\n                click: function () { main_1.mainWindow.webContents.send('menu_action', 'file.new'); }\n            },\n            {\n                label: 'New Folder',\n                accelerator: 'CmdOrCtrl+Shift+N',\n                click: function () { main_1.mainWindow.webContents.send('menu_action', 'file.new_folder'); }\n            },\n            {\n                label: 'Exit',\n                accelerator: 'Alt+F4',\n                click: function () { main_1.mainWindow.close(); }\n            },\n        ]\n    },\n    {\n        label: 'Edit',\n        submenu: [\n            {\n                role: 'undo'\n            },\n            {\n                role: 'redo'\n            },\n            {\n                type: 'separator'\n            },\n            {\n                role: 'cut'\n            },\n            {\n                role: 'copy'\n            },\n            {\n                role: 'paste'\n            },\n            {\n                role: 'pasteandmatchstyle'\n            },\n            {\n                role: 'delete'\n            },\n            {\n                role: 'selectall'\n            }\n        ]\n    },\n    {\n        label: 'View',\n        submenu: [\n            {\n                label: 'Reload',\n                accelerator: 'CmdOrCtrl+R',\n                click: function (item, focusedWindow) {\n                    if (focusedWindow)\n                        focusedWindow.reload();\n                }\n            },\n            {\n                label: 'Toggle Developer Tools',\n                accelerator: process.platform === 'darwin' ? 'Alt+Command+I' : 'Ctrl+Shift+I',\n                click: function (item, focusedWindow) {\n                    if (focusedWindow)\n                        focusedWindow.webContents.toggleDevTools();\n                }\n            },\n            {\n                type: 'separator'\n            },\n            {\n                role: 'resetzoom'\n            },\n            {\n                role: 'zoomin'\n            },\n            {\n                role: 'zoomout'\n            },\n            {\n                type: 'separator'\n            },\n            {\n                role: 'togglefullscreen'\n            }\n        ]\n    },\n    {\n        role: 'window',\n        submenu: [\n            {\n                role: 'minimize'\n            },\n            {\n                role: 'close'\n            }\n        ]\n    },\n    {\n        role: 'help',\n        submenu: [\n            {\n                label: 'Learn More',\n                click: function () { require('electron').shell.openExternal('http://electron.atom.io'); }\n            }\n        ]\n    }\n];\nif (process.platform === 'darwin') {\n    var name_1 = electron_1.app.getName();\n    defaulttemplate.unshift({\n        label: name_1,\n        submenu: [\n            {\n                role: 'about'\n            },\n            {\n                type: 'separator'\n            },\n            {\n                role: 'services',\n                submenu: []\n            },\n            {\n                type: 'separator'\n            },\n            {\n                role: 'hide'\n            },\n            {\n                role: 'hideothers'\n            },\n            {\n                role: 'unhide'\n            },\n            {\n                type: 'separator'\n            },\n            {\n                role: 'quit'\n            }\n        ]\n    });\n    // Edit menu.\n    defaulttemplate[1].submenu.push({\n        type: 'separator'\n    }, {\n        label: 'Speech',\n        submenu: [\n            {\n                role: 'startspeaking'\n            },\n            {\n                role: 'stopspeaking'\n            }\n        ]\n    });\n    // Window menu.\n    defaulttemplate[3].submenu = [\n        {\n            label: 'Close',\n            accelerator: 'CmdOrCtrl+W',\n            role: 'close'\n        },\n        {\n            label: 'Minimize',\n            accelerator: 'CmdOrCtrl+M',\n            role: 'minimize'\n        },\n        {\n            label: 'Zoom',\n            role: 'zoom'\n        },\n        {\n            type: 'separator'\n        },\n        {\n            label: 'Bring All to Front',\n            role: 'front'\n        }\n    ];\n}\nvar MenuManager = /** @class */ (function () {\n    function MenuManager(template) {\n        if (template === void 0) { template = defaulttemplate; }\n        this.template = template;\n    }\n    MenuManager.prototype.getMenu = function () {\n        return electron_1.Menu.buildFromTemplate(this.template);\n    };\n    MenuManager.prototype.apply = function (window) {\n        electron_1.Menu.setApplicationMenu(this.getMenu());\n        return this;\n    };\n    // WARNING: Not ready and has errors\n    MenuManager.prototype.pushItem = function (path, itemOptions, indexes) {\n        if (indexes === void 0) { indexes = []; }\n        console.warn(\"Please do not use the pushItem method, it has bugs and may crash the program\");\n        function insert(arr, value, indexesindex) {\n            if (indexes[indexesindex] != null)\n                arr.splice(indexes[indexesindex], 0, created[0]);\n            else\n                arr.push(value);\n            return arr;\n        }\n        var split = path.split(\".\");\n        var subs = this.template;\n        var created = [];\n        for (var i = 0; i < split.length; i++) {\n            var alreadyExists = false;\n            for (var c = 0; c < subs.length; c++) {\n                if (subs[c].label == split[i]) {\n                    delete subs[subs.indexOf(subs[c])];\n                    if (created[i - 1])\n                        created[i - 1].submenu = subs;\n                    else\n                        this.template = subs;\n                    created.push(subs[i]);\n                    if (!subs[c].submenu)\n                        subs[c].submenu = [];\n                    subs = subs[c].submenu;\n                    alreadyExists = true;\n                    break;\n                }\n            }\n            if (!alreadyExists) {\n                created.push({ label: split[i], submenu: [] });\n                subs = [];\n            }\n        }\n        created[created.length - 1].submenu.push(itemOptions);\n        for (var i = created.length - 1; i > 0; i--) {\n            created[i - 1].submenu.push(created[i]);\n        }\n        this.template = insert(this.template, created[0], 0);\n    };\n    return MenuManager;\n}());\nexports.MenuManager = MenuManager;\nvar ItemOptions = /** @class */ (function () {\n    function ItemOptions() {\n    }\n    return ItemOptions;\n}());\nexports[\"default\"] = MenuManager;\n","import { BrowserWindow, Menu, app } from 'electron';\r\nimport { mainWindow } from '../../main';\r\n\r\nconst defaulttemplate:ItemOptions[] = [\r\n  {\r\n    label: 'File',\r\n    submenu: [\r\n      {\r\n        label: 'Save',\r\n        accelerator: 'CmdOrCtrl+S',\r\n        click: function() {mainWindow.webContents.send('menu_action','file.save');}\r\n      },\r\n      {\r\n        label: 'Save as',\r\n        accelerator: 'CmdOrCtrl+Shift+S',\r\n        click: function() {mainWindow.webContents.send('menu_action','file.save_as');}\r\n      },/*\r\n      {\r\n        label: 'Open File',\r\n        accelerator: 'CmdOrCtrl+S',\r\n        click: function() {mainWindow.webContents.send('menu_action','file.open');}\r\n      },\r\n      {\r\n        label: 'Open Folder',\r\n        accelerator: 'CmdOrCtrl+Shift+S',\r\n        click: function() {mainWindow.webContents.send('menu_action','file.open_folder');}\r\n      },*/\r\n      {\r\n        label: 'New File',\r\n        accelerator: 'CmdOrCtrl+N',\r\n        click: function() {mainWindow.webContents.send('menu_action','file.new');}\r\n      },\r\n      {\r\n        label: 'New Folder',\r\n        accelerator: 'CmdOrCtrl+Shift+N',\r\n        click: function() {mainWindow.webContents.send('menu_action','file.new_folder');}\r\n      },\r\n      {\r\n        label: 'Exit',\r\n        accelerator: 'Alt+F4',\r\n        click: function() {mainWindow.close()}\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    label: 'Edit',\r\n    submenu: [\r\n      {\r\n        role: 'undo'\r\n      },\r\n      {\r\n        role: 'redo'\r\n      },\r\n      {\r\n        type: 'separator'\r\n      },\r\n      {\r\n        role: 'cut'\r\n      },\r\n      {\r\n        role: 'copy'\r\n      },\r\n      {\r\n        role: 'paste'\r\n      },\r\n      {\r\n        role: 'pasteandmatchstyle'\r\n      },\r\n      {\r\n        role: 'delete'\r\n      },\r\n      {\r\n        role: 'selectall'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'View',\r\n    submenu: [\r\n      {\r\n        label: 'Reload',\r\n        accelerator: 'CmdOrCtrl+R',\r\n        click (item, focusedWindow) {\r\n          if (focusedWindow) focusedWindow.reload()\r\n        }\r\n      },\r\n      {\r\n        label: 'Toggle Developer Tools',\r\n        accelerator: process.platform === 'darwin' ? 'Alt+Command+I' : 'Ctrl+Shift+I',\r\n        click (item, focusedWindow) {\r\n          if (focusedWindow) focusedWindow.webContents.toggleDevTools()\r\n        }\r\n      },\r\n      {\r\n        type: 'separator'\r\n      },\r\n      {\r\n        role: 'resetzoom'\r\n      },\r\n      {\r\n        role: 'zoomin'\r\n      },\r\n      {\r\n        role: 'zoomout'\r\n      },\r\n      {\r\n        type: 'separator'\r\n      },\r\n      {\r\n        role: 'togglefullscreen'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    role: 'window',\r\n    submenu: [\r\n      {\r\n        role: 'minimize'\r\n      },\r\n      {\r\n        role: 'close'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    role: 'help',\r\n    submenu: [\r\n      {\r\n        label: 'Learn More',\r\n        click () { require('electron').shell.openExternal('http://electron.atom.io') }\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nif (process.platform === 'darwin') {\r\n  const name = app.getName()\r\n  defaulttemplate.unshift({\r\n    label: name,\r\n    submenu: [\r\n      {\r\n        role: 'about'\r\n      },\r\n      {\r\n        type: 'separator'\r\n      },\r\n      {\r\n        role: 'services',\r\n        submenu: []\r\n      },\r\n      {\r\n        type: 'separator'\r\n      },\r\n      {\r\n        role: 'hide'\r\n      },\r\n      {\r\n        role: 'hideothers'\r\n      },\r\n      {\r\n        role: 'unhide'\r\n      },\r\n      {\r\n        type: 'separator'\r\n      },\r\n      {\r\n        role: 'quit'\r\n      }\r\n    ]\r\n  })\r\n  // Edit menu.\r\n  defaulttemplate[1].submenu.push(\r\n    {\r\n      type: 'separator'\r\n    },\r\n    {\r\n      label: 'Speech',\r\n      submenu: [\r\n        {\r\n          role: 'startspeaking'\r\n        },\r\n        {\r\n          role: 'stopspeaking'\r\n        }\r\n      ]\r\n    }\r\n  )\r\n  // Window menu.\r\n  defaulttemplate[3].submenu = [\r\n    {\r\n      label: 'Close',\r\n      accelerator: 'CmdOrCtrl+W',\r\n      role: 'close'\r\n    },\r\n    {\r\n      label: 'Minimize',\r\n      accelerator: 'CmdOrCtrl+M',\r\n      role: 'minimize'\r\n    },\r\n    {\r\n      label: 'Zoom',\r\n      role: 'zoom'\r\n    },\r\n    {\r\n      type: 'separator'\r\n    },\r\n    {\r\n      label: 'Bring All to Front',\r\n      role: 'front'\r\n    }\r\n  ]\r\n}\r\n\r\nclass MenuManager {\r\n  template:any;\r\n  constructor(template=defaulttemplate) {\r\n    this.template=template;\r\n  }\r\n  getMenu() {\r\n    return Menu.buildFromTemplate(this.template);\r\n  }\r\n  apply(window:BrowserWindow):MenuManager {\r\n    Menu.setApplicationMenu(this.getMenu());\r\n    return this;\r\n  }\r\n\r\n  // WARNING: Not ready and has errors\r\n  pushItem(path:string,itemOptions:ItemOptions,indexes:number[]=[]) {\r\n    console.warn(\"Please do not use the pushItem method, it has bugs and may crash the program\")\r\n    function insert(arr:any[],value:any,indexesindex:number) {\r\n      if(indexes[indexesindex]!=null)arr.splice(indexes[indexesindex], 0, created[0]);\r\n      else arr.push(value);\r\n      return arr;\r\n    }\r\n\r\n    let split:string[]=path.split(\".\");\r\n\r\n    let subs:ItemOptions[] = this.template;\r\n    let created:ItemOptions[] = [];\r\n    for(let i:number=0;i<split.length;i++) {\r\n      let alreadyExists:boolean = false;\r\n      for(let c:number=0;c<subs.length;c++) {\r\n        if(subs[c].label==split[i]) {\r\n          delete subs[subs.indexOf(subs[c])];\r\n          if(created[i-1])created[i-1].submenu = subs;\r\n          else this.template = subs;\r\n          created.push(subs[i]);\r\n          if(!subs[c].submenu) subs[c].submenu=[];\r\n          subs = subs[c].submenu;\r\n          alreadyExists=true;\r\n          break;\r\n        }\r\n      }\r\n      if(!alreadyExists) {\r\n        created.push({label:split[i],submenu:[]});\r\n        subs = [];\r\n      }\r\n    }\r\n    created[created.length-1].submenu.push(itemOptions);\r\n\r\n    for(let i:number=created.length-1;i>0;i--) {\r\n      created[i-1].submenu.push(created[i]);\r\n    }\r\n\r\n    this.template = insert(this.template,created[0],0);\r\n  }\r\n}\r\nclass ItemOptions {\r\n  label?:string;\r\n  role?:string;\r\n  accelerator?:string;\r\n  type?:string;\r\n  click?:Function;\r\n  submenu?:ItemOptions[];\r\n}\r\n\r\nexport default MenuManager\r\nexport {MenuManager};\r\n"]}