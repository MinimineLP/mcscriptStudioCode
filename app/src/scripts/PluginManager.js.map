{"version":3,"sources":["PluginManager.js","PluginManager.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","reject","step","resolve","value","e","fulfilled","result","done","then","rejected","next","__generator","body","f","y","t","g","_","label","sent","trys","ops","throw","verb","return","Symbol","iterator","this","n","v","TypeError","op","call","pop","length","push","exports","manager","fs","require","Path","extract","$","npmi","SiteAPI","global","srclocation","__dirname","PluginManager","instance","plugins","api","ServerApi","prototype","readyPluginDir","plugindir","existsSync","mkdirSync","deleteFolderRecursive","copyFolderRecursiveSync","readyPlugin","plugin","callback","node_modules","dir","options","_a","path","forceInstall","npmLoad","loglevel","err","code","LOAD_ERR","console","log","INSTALL_ERR","message","printStackTrace","loadPlugins","THIS","getPlugins","x","forEach","i","ready","b","loadPlugin","Error","desc","getPluginDescription","name","url","author","author_url","version","main","dependencies","pluginDependencies","installPlugin","dependency","Dependency","setupPlugins","_i","setup","startPlugins","start","stopPlugins","stop","reloadPlugins","reload","JSON","parse","readFileSync","toString","error","ret","readdirSync","lstatSync","isDirectory","toLowerCase","fireEvent","event","pluginfolder","loadSite","parseURL","res","zipfile_1","downloadFile","versions","newestversion","unlinkSync","listeners","apis","on","func","registerListener","OnListener","listener","type","getType","run","addStylesheet","stylesheet","document","getElementById","head","getElementsByTagName","link","createElement","id","rel","href","media","appendChild","addScript","script","warn","src","addElement","element","HTMLElement","append","registerAPI","key","getAPI","Plugin","requiredBy","trigger","guid","s4","Math","floor","random","substring","copyFileSync","source","target","targetFile","join","basename","writeFileSync","useOldName","targetFolder","file","curSource","curPath","rmdirSync","Event"],"mappings":"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","file":"PluginManager.js","sourcesContent":["\"use strict\";\n/**\n * @name PluginManager\n * @author Minimine <https://github.com/miniminelp>\n * @description this PluginManager is a part of the MCScriptStudioCode editor. It is Licensed under MIT License.\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nvar fs = require(\"fs\");\nvar Path = require(\"path\");\nvar extract = require(\"extract-zip\");\nvar $ = require(\"jquery\");\nvar npmi = require(\"npmi\");\nvar SiteAPI = require(\"./SiteApi\");\nvar manager;\n/**\n *\n */\nglobal.srclocation = __dirname;\n/**\n * @class PluginManager\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.2\n * @version 0.0.2\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description The manager for the plugins\n *\n */\nvar PluginManager = /** @class */ (function () {\n    /**\n     * @function constructor\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Constructor for Class PluginManager\n     *\n     */\n    function PluginManager() {\n        PluginManager.instance = this;\n        this.plugins = [];\n        this.api = new ServerApi(this);\n        manager = this;\n    }\n    /**\n     * @function readyPluginDir\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.3\n     * @version 0.0.3\n     * @license MIT\n     *\n     * @copyright (c) Minimine 2018\n     * @description makes the plugins ready\n     *\n     */\n    PluginManager.prototype.readyPluginDir = function (plugindir) {\n        if (!fs.existsSync(plugindir + \"/node_modules\"))\n            fs.mkdirSync(plugindir + \"/node_modules\");\n        if (fs.existsSync(plugindir + \"/node_modules/@mcscriptstudiocode\"))\n            deleteFolderRecursive(plugindir + \"/node_modules/@mcscriptstudiocode\");\n        copyFolderRecursiveSync('types/@mcscriptstudiocode', plugindir + \"/node_modules\");\n        if (fs.existsSync(plugindir + \"/node_modules/mcscriptstudiocode\"))\n            deleteFolderRecursive(plugindir + \"/node_modules/mcscriptstudiocode\");\n        copyFolderRecursiveSync('types/mcscriptstudiocode', plugindir + \"/node_modules\");\n        if (fs.existsSync(plugindir + \"/node_modules/@mcscriptstudiocodeplugins\"))\n            deleteFolderRecursive(plugindir + \"/node_modules/@mcscriptstudiocodeplugins\");\n        fs.mkdirSync(plugindir + \"/node_modules/@mcscriptstudiocodeplugins\");\n    };\n    /**\n     * @function readyPlugin\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.3\n     * @version 0.0.3\n     * @license MIT\n     *\n     * @copyright (c) Minimine 2018\n     * @description makes a plugin ready\n     *\n     */\n    PluginManager.prototype.readyPlugin = function (plugindir, plugin, callback) {\n        if (callback === void 0) { callback = function () { }; }\n        return __awaiter(this, void 0, void 0, function () {\n            var node_modules, dir, options;\n            return __generator(this, function (_a) {\n                try {\n                    if (fs.existsSync(plugindir + \"/\" + plugin + \"/types\")) {\n                        node_modules = plugindir + \"/node_modules\";\n                        if (!fs.existsSync(node_modules))\n                            fs.mkdirSync(node_modules);\n                        if (!fs.existsSync(node_modules + \"/@mcscriptstudiocodeplugins\"))\n                            fs.mkdirSync(node_modules + \"/@mcscriptstudiocodeplugins\");\n                        dir = node_modules + \"/@mcscriptstudiocodeplugins/\" + plugin;\n                        if (fs.existsSync(dir))\n                            deleteFolderRecursive(dir);\n                        fs.mkdirSync(dir);\n                        copyFolderRecursiveSync(plugindir + \"/\" + plugin + \"/types\", dir, false);\n                    }\n                    if (!fs.existsSync(plugindir + \"/\" + plugin))\n                        return [2 /*return*/];\n                    options = {\n                        path: plugindir + \"/\" + plugin,\n                        forceInstall: false,\n                        npmLoad: {\n                            loglevel: 'silent'\n                        }\n                    };\n                    npmi(options, function (err) {\n                        if (err) {\n                            if (callback)\n                                callback(err);\n                            if (err.code === npmi.LOAD_ERR)\n                                console.log('npm load error');\n                            else if (err.code === npmi.INSTALL_ERR)\n                                console.log('npm install error');\n                            return console.log(err.message);\n                        }\n                        if (callback)\n                            callback();\n                        // installed\n                        console.log('Installed dependencies successfully in ' + Path.resolve(options.path));\n                    });\n                }\n                catch (e) {\n                    callback(e);\n                    e.printStackTrace();\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * @function loadPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     *\n     * @copyright (c) Minimine 2018\n     * @description Loads the plugins\n     *\n     */\n    PluginManager.prototype.loadPlugins = function (plugindir, callback) {\n        if (callback === void 0) { callback = function () { }; }\n        var THIS = this;\n        THIS.readyPluginDir(plugindir);\n        if (!fs.existsSync(plugindir))\n            fs.mkdirSync(plugindir);\n        var plugins = this.getPlugins(plugindir);\n        var x = [];\n        plugins.forEach(function (e, i) {\n            x[i] = false;\n            THIS.readyPlugin(plugindir, e, function () {\n                x[i] = true;\n                var ready = true;\n                x.forEach(function (b) {\n                    if (!b)\n                        ready = false;\n                });\n                if (ready) {\n                    plugins.forEach(function (e) { THIS.plugins.push(THIS.loadPlugin(plugindir, e)); });\n                    if (callback)\n                        callback();\n                }\n            });\n        });\n    };\n    /**\n     * @function loadPlugin\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Loads a Plugin\n     * @param plugin the Plugin to load\n     * @return the plugin main file default class\n     *\n     */\n    PluginManager.prototype.loadPlugin = function (plugindir, plugin) {\n        if (!fs.existsSync(plugindir + \"/\" + plugin + \"/\"))\n            throw new Error(\"Plugin \" + plugin + \" does not exists in plugindir \" + plugindir);\n        if (fs.existsSync(plugindir + \"/\" + plugin + \"/types\")) {\n            var node_modules = plugindir + \"/node_modules\";\n            if (!fs.existsSync(node_modules))\n                fs.mkdirSync(node_modules);\n            if (!fs.existsSync(node_modules + \"/@mcscriptstudiocodeplugins\"))\n                fs.mkdirSync(node_modules + \"/@mcscriptstudiocodeplugins\");\n            var dir = node_modules + \"/@mcscriptstudiocodeplugins/\" + plugin;\n            if (fs.existsSync(dir))\n                deleteFolderRecursive(dir);\n            fs.mkdirSync(dir);\n            copyFolderRecursiveSync(plugindir + \"/\" + plugin + \"/types\", dir, false);\n        }\n        var desc = this.getPluginDescription(plugindir, plugin);\n        var name = desc.name, url = desc.url, author = desc.author, author_url = desc.author_url, version = desc.version, main = desc.main;\n        var dependencies = [];\n        if (desc.pluginDependencies) {\n            for (var i in desc.pluginDependencies) {\n                if (!fs.existsSync(plugindir + \"/\" + desc.pluginDependencies[i].name)) {\n                    console.log(\"installing plugin \" + desc.pluginDependencies[i].name + \" from \\\"\" + desc.pluginDependencies[i].url + \"\\\" caused of a dependency of plugin \\\"\" + name + \"\\\"\");\n                    this.installPlugin(desc.pluginDependencies[i].url, plugindir);\n                }\n                var dependency = new Dependency(desc.pluginDependencies[i].name, desc.pluginDependencies[i].url, plugindir, name);\n                dependencies.push(dependency);\n            }\n        }\n        if (!fs.existsSync(plugindir + \"/\" + plugin + \"/\" + main))\n            throw new Error(\"Plugin main from plugin \" + plugin + \" does not exists\");\n        var Plugin = require(plugindir + \"/\" + plugin + \"/\" + main)[\"default\"];\n        return new Plugin(name, url, author, author_url, version, main, dependencies, plugindir + \"/\" + plugin);\n    };\n    /**\n     * @function setupPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description setups the plugins\n     *\n     */\n    PluginManager.prototype.setupPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.setup(this.api);\n        }\n    };\n    /**\n     * @function startPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Starts the plugins\n     *\n     */\n    PluginManager.prototype.startPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.start(this.api);\n        }\n    };\n    /**\n     * @function stopPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description stops the plugins\n     *\n     */\n    PluginManager.prototype.stopPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.stop(this.api);\n        }\n    };\n    /**\n     * @function reloadPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description reloads the plugins\n     *\n     */\n    PluginManager.prototype.reloadPlugins = function () {\n        for (var _i = 0, _a = this.plugins; _i < _a.length; _i++) {\n            var plugin = _a[_i];\n            plugin.reload(this.api);\n        }\n    };\n    /**\n     * @function getPluginDescription\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description returns the description of a plugin\n     * @param plugin the Plugin to load\n     * @return the package.json content\n     *\n     */\n    PluginManager.prototype.getPluginDescription = function (plugindir, plugin) {\n        try {\n            return JSON.parse(fs.readFileSync(plugindir + \"/\" + plugin + \"/package.json\").toString());\n        }\n        catch (e) {\n            console.error(\"Error reading plugindescription of plugin \" + plugin + \": \", e);\n            return {};\n        }\n    };\n    /**\n     * @function getPlugins\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description scans for plugins in the plugindir\n     * @return the plugins in the plugindir\n     *\n     */\n    PluginManager.prototype.getPlugins = function (plugindir) {\n        var ret = [];\n        for (var _i = 0, _a = fs.readdirSync(plugindir); _i < _a.length; _i++) {\n            var i = _a[_i];\n            if (fs.lstatSync(plugindir + \"/\" + i).isDirectory() && i.toLowerCase() != \"node_modules\")\n                ret.push(i);\n        }\n        return ret;\n    };\n    /**\n     * @function fireEvent\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     * @description register a listener\n     *\n     * @param event the Event to fire\n     */\n    PluginManager.prototype.fireEvent = function (event) {\n        return this.api.fireEvent(event);\n    };\n    /**\n     * @function installPlugin\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     * @description install a plugin (by url into pluginfolder)\n     *\n     * @param url the url\n     * @param pluginfolder the pluginfoder\n     */\n    PluginManager.prototype.installPlugin = function (url, pluginfolder) {\n        var THIS = this;\n        SiteAPI.loadSite(SiteAPI.parseURL(url), function (res) {\n            res = JSON.parse(res);\n            if (!fs.existsSync(pluginfolder + \"/\" + res.name)) {\n                var zipfile_1 = pluginfolder + \"/\" + res.name + \".tmp.zip\";\n                SiteAPI.downloadFile(zipfile_1, res.versions[res.newestversion], function () {\n                    extract(zipfile_1, { dir: pluginfolder + \"/\" + res.name }, function (err) {\n                        if (err)\n                            console.log(err);\n                        else {\n                            fs.unlinkSync(zipfile_1);\n                            THIS.readyPlugin(pluginfolder, res.name);\n                        }\n                    });\n                });\n            }\n        });\n    };\n    return PluginManager;\n}());\nexports.PluginManager = PluginManager;\n/**\n * @class ServerApi\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.2\n * @version 0.0.2\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description The Api to manage the server\n *\n */\nvar ServerApi = /** @class */ (function () {\n    /**\n     * @function constructor\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.3\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Constructorclass for the ServerApi\n     */\n    function ServerApi(manager) {\n        /**\n         * @var listeners\n         * @author Minimine <https://github.com/miniminelp>\n         * @since 0.0.2\n         * @version 0.0.2\n         * @license MIT\n         * @copyright (c) Minimine 2018\n         *\n         * @description contains the listeners\n         *\n         */\n        this.listeners = [];\n        /**\n         * @var apis\n         * @author Minimine <https://github.com/miniminelp>\n         * @since 0.0.2\n         * @version 0.0.2\n         * @license MIT\n         * @copyright (c) Minimine 2018\n         *\n         * @description the api register (can be got)\n         *\n         */\n        this.apis = {};\n        this.manager = manager;\n        this.plugins = manager.plugins;\n    }\n    /**\n     * @function on\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description register a function as listener by event name\n     * @deprecated Use ServerApi#registerListener(Listener)\n     * @param event the event to listen for\n     * @param func the function to execute when event appears\n     */\n    ServerApi.prototype.on = function (event, func) {\n        this.registerListener(new OnListener(event, func));\n    };\n    /**\n     * @function registerListener\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description register a listener\n     * @param listener the listener to register\n     */\n    ServerApi.prototype.registerListener = function (listener) {\n        this.listeners.push(listener);\n    };\n    /**\n     * @function fireEvent\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description register a listener\n     * @param event the Event to fire\n     *\n     */\n    ServerApi.prototype.fireEvent = function (event) {\n        var type = event.getType();\n        for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            if (listener.getType() == type) {\n                listener.run(event);\n            }\n        }\n        return event;\n    };\n    /**\n     * @function addStylesheet\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description loads a css stylesheet via a <link> tag\n     * @param stylesheet the script path\n     *\n     */\n    ServerApi.prototype.addStylesheet = function (stylesheet) {\n        if (!document.getElementById(stylesheet)) {\n            var head = document.getElementsByTagName('head')[0];\n            var link = document.createElement('link');\n            link.id = stylesheet;\n            link.rel = 'stylesheet';\n            link.type = 'text/css';\n            link.href = stylesheet;\n            link.media = 'all';\n            head.appendChild(link);\n        }\n    };\n    /**\n     * @function addScript\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @deprecated please use require(yourscript) instead\n     * @description loads a javascript via a <script src=\"yourscript\"></script>\n     * @param script the element's path\n     *\n     */\n    ServerApi.prototype.addScript = function (script) {\n        console.warn(\"Please use require(yourscript) instead of the deprecated method ServerApi#addScript()\");\n        //console.log(`Loaded script from \"${script}\"`);\n        if (!document.getElementById(script)) {\n            var head = document.getElementsByTagName('head')[0];\n            var link = document.createElement('script');\n            link.id = script;\n            link.type = 'text/javascript';\n            link.src = script;\n            head.appendChild(link);\n        }\n    };\n    /**\n     * @function addElement\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description adds an element to the document's body\n     * @param element the element to add\n     *\n     */\n    ServerApi.prototype.addElement = function (element) {\n        if (element instanceof HTMLElement)\n            document.body.appendChild(element);\n        else\n            $(\"body\").append(element);\n    };\n    /**\n     * @function registerAPI\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n  \r\n     * @description register a api\n     * @param key the api key\n     * @param api the api\n     */\n    ServerApi.prototype.registerAPI = function (key, api) {\n        this.apis[key] = api;\n    };\n    /**\n     * @function getAPI\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n  \r\n     * @description get a api\n     * @param key the api key\n     * @return the api\n     */\n    ServerApi.prototype.getAPI = function (key) {\n        return this.apis[key];\n    };\n    return ServerApi;\n}());\nexports.ServerApi = ServerApi;\n/**\n * @class Plugin\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.2\n * @version 0.0.2\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description the plugin definition\n * @abstract\n *\n */\nvar Plugin = /** @class */ (function () {\n    /**\n     * @function constructor\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Constructor for the Plugin class\n     * @param name the plugin's name\n     * @param url the plugin's url\n     * @param author the plugin's author(s)\n     * @param author_url the plugin author's url(s)\n     * @param version the plugin's version\n     * @param main the plugin's main file\n     *\n     */\n    function Plugin(name, url, author, author_url, version, main, dependencies, path) {\n        this.name = name;\n        this.url = url;\n        this.author = author;\n        this.author_url = author_url;\n        this.version = version;\n        this.main = main;\n        this.dependencies = dependencies;\n        this.path = path;\n    }\n    return Plugin;\n}());\nexports.Plugin = Plugin;\n/**\n * @class Dependency\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.3\n * @version 0.0.3\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description the dependency definition\n * @abstract\n *\n */\nvar Dependency = /** @class */ (function () {\n    /**\n     * @function constructor\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.3\n     * @version 0.0.3\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description Constructor for the Dependency class\n     * @param name the plugin's name\n     * @param url the plugin's url\n     *\n     */\n    function Dependency(name, url, plugindir, requiredBy) {\n        this.name = name;\n        this.url = url;\n        if (!fs.existsSync(plugindir + \"/\" + name + \"/\"))\n            manager.installPlugin(url, plugindir);\n        if (fs.existsSync(plugindir + \"/\" + name + \"/\"))\n            this.plugin = manager.loadPlugin(plugindir, name);\n        else\n            throw new Error(\"The dependency \" + name + \" in \" + requiredBy + \" has an wrong import!\");\n    }\n    return Dependency;\n}());\n/**\n * @class OnListener\n * @implements Listener\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.2\n * @version 0.0.2\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description Listening for a event by name (deprecated)\n * @deprecated on-Listeners are deprecated, make Listeners from the Listener interface\n *\n */\nvar OnListener = /** @class */ (function () {\n    /**\n     * @function constructor\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description the constructor vor OnListener\n     * @param trigger the trigger\n     * @param func the Function to execute when the event apears\n     *\n     */\n    function OnListener(trigger, func) {\n        this.trigger = trigger;\n        this.func = func;\n    }\n    /**\n     * @see Listener#run\n     *\n     * @function run\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description executed when the event apears\n     * @param event the event\n     *\n     */\n    OnListener.prototype.run = function (event) {\n        this.func(event);\n    };\n    /**\n     * @see Listener#getType\n     *\n     * @function getType\n     * @author Minimine <https://github.com/miniminelp>\n     * @since 0.0.2\n     * @version 0.0.2\n     * @license MIT\n     * @copyright (c) Minimine 2018\n     *\n     * @description returns the type of the event\n     * @return the Event type\n     */\n    OnListener.prototype.getType = function () {\n        return this.trigger;\n    };\n    return OnListener;\n}());\nexports.OnListener = OnListener;\n/**\n * @function guid\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.1\n * @version 0.0.1\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description returns a random uuid\n * @return random uuid\n *\n */\nfunction guid() {\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\nexports.guid = guid;\n/**\n * @function copyFileSync\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.3\n * @version 0.0.3\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description copys a file\n * @param source the source file\n * @param target the paste target\n *\n */\nfunction copyFileSync(source, target) {\n    var targetFile = target;\n    if (fs.existsSync(target)) {\n        if (fs.lstatSync(target).isDirectory()) {\n            targetFile = Path.join(target, Path.basename(source));\n        }\n    }\n    fs.writeFileSync(targetFile, fs.readFileSync(source));\n}\n/**\n * @function copyFolderRecursiveSync\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.3\n * @version 0.0.3\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description copys a folder recursively\n * @param source the source folder\n * @param target the paste target\n * @param useOldName should a sub folder created with the old name? default: true\n *\n */\nfunction copyFolderRecursiveSync(source, target, useOldName) {\n    if (useOldName === void 0) { useOldName = true; }\n    var files = [];\n    var targetFolder = target;\n    if (useOldName)\n        targetFolder = Path.join(target, Path.basename(source));\n    if (!fs.existsSync(targetFolder)) {\n        fs.mkdirSync(targetFolder);\n    }\n    if (fs.lstatSync(source).isDirectory()) {\n        files = fs.readdirSync(source);\n        files.forEach(function (file) {\n            var curSource = Path.join(source, file);\n            if (fs.lstatSync(curSource).isDirectory()) {\n                copyFolderRecursiveSync(curSource, targetFolder);\n            }\n            else {\n                copyFileSync(curSource, targetFolder);\n            }\n        });\n    }\n}\n/**\n * @function deleteFolderRecursive\n * @author Minimine <https://github.com/miniminelp>\n * @since 0.0.3\n * @version 0.0.3\n * @license MIT\n * @copyright (c) Minimine 2018\n *\n * @description deletes a folder recursively\n * @param path the folder to delete\n *\n */\nfunction deleteFolderRecursive(path) {\n    if (fs.existsSync(path)) {\n        fs.readdirSync(path).forEach(function (file) {\n            var curPath = path + \"/\" + file;\n            if (fs.lstatSync(curPath).isDirectory()) { // recurse\n                deleteFolderRecursive(curPath);\n            }\n            else { // delete file\n                fs.unlinkSync(curPath);\n            }\n        });\n        fs.rmdirSync(path);\n    }\n}\n/*\n **********************************************************************************************************************************\n **********************************************************************************************************************************\n Static\n **********************************************************************************************************************************\n **********************************************************************************************************************************\n */\n/*\n **********************************************************************************************************************************\n **********************************************************************************************************************************\n Exports\n **********************************************************************************************************************************\n **********************************************************************************************************************************\n */\n// Make classes global usable\nglobal.Plugin = Plugin;\nglobal.ServerApi = ServerApi;\nglobal.PluginManager = PluginManager;\nglobal.Event = Event;\nglobal.OnListener = OnListener;\nglobal.guid = guid;\nglobal.deleteFolderRecursive = deleteFolderRecursive;\nglobal.copyFolderRecursiveSync = copyFolderRecursiveSync;\nglobal.copyFileSync = copyFileSync;\n// Export and return on require / import\nexports[\"default\"] = PluginManager;\n","/**\r\n * @name PluginManager\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @description this PluginManager is a part of the MCScriptStudioCode editor. It is Licensed under MIT License.\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n */\r\n\r\nimport * as fs from 'fs';\r\nimport * as Path from 'path';\r\nimport * as extract from 'extract-zip';\r\nimport * as $ from 'jquery';\r\nimport * as npmi from 'npmi';\r\nimport * as SiteAPI from './SiteApi';\r\n\r\ndeclare let global;\r\nlet manager:PluginManager;\r\n\r\n/**\r\n *\r\n */\r\nglobal.srclocation = __dirname;\r\n\r\n/**\r\n * @class PluginManager\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.2\r\n * @version 0.0.2\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description The manager for the plugins\r\n *\r\n */\r\nclass PluginManager {\r\n\r\n  static instance:PluginManager;\r\n\r\n  /**\r\n   * @var plugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The loaded plugins\r\n   *\r\n   */\r\n  plugins: Plugin[];\r\n\r\n  /**\r\n   * @var api\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The api\r\n   *\r\n   */\r\n  api: ServerApi;\r\n\r\n  /**\r\n   * @function constructor\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Constructor for Class PluginManager\r\n   *\r\n   */\r\n  constructor() {\r\n    PluginManager.instance = this;\r\n    this.plugins = [];\r\n    this.api = new ServerApi(this);\r\n    manager = this;\r\n  }\r\n\r\n  /**\r\n   * @function readyPluginDir\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   *\r\n   * @copyright (c) Minimine 2018\r\n   * @description makes the plugins ready\r\n   *\r\n   */\r\n  readyPluginDir(plugindir:string): void {\r\n    if(!fs.existsSync(`${plugindir}/node_modules`))fs.mkdirSync(`${plugindir}/node_modules`);\r\n    if(fs.existsSync(`${plugindir}/node_modules/@mcscriptstudiocode`))deleteFolderRecursive(`${plugindir}/node_modules/@mcscriptstudiocode`);\r\n    copyFolderRecursiveSync('types/@mcscriptstudiocode', `${plugindir}/node_modules`);\r\n    if(fs.existsSync(`${plugindir}/node_modules/mcscriptstudiocode`))deleteFolderRecursive(`${plugindir}/node_modules/mcscriptstudiocode`);\r\n    copyFolderRecursiveSync('types/mcscriptstudiocode', `${plugindir}/node_modules`);\r\n    if(fs.existsSync(`${plugindir}/node_modules/@mcscriptstudiocodeplugins`))deleteFolderRecursive(`${plugindir}/node_modules/@mcscriptstudiocodeplugins`);\r\n    fs.mkdirSync(`${plugindir}/node_modules/@mcscriptstudiocodeplugins`);\r\n  }\r\n\r\n  /**\r\n   * @function readyPlugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   *\r\n   * @copyright (c) Minimine 2018\r\n   * @description makes a plugin ready\r\n   *\r\n   */\r\n  async readyPlugin(plugindir:string,plugin:string,callback:CallbackFunction = function() {}) {\r\n    try {\r\n      if(fs.existsSync(`${plugindir}/${plugin}/types`)) {\r\n        let node_modules = `${plugindir}/node_modules`;\r\n        if(!fs.existsSync(node_modules)) fs.mkdirSync(node_modules);\r\n        if(!fs.existsSync(`${node_modules}/@mcscriptstudiocodeplugins`)) fs.mkdirSync(`${node_modules}/@mcscriptstudiocodeplugins`);\r\n        let dir = `${node_modules}/@mcscriptstudiocodeplugins/${plugin}`;\r\n        if(fs.existsSync(dir))deleteFolderRecursive(dir);\r\n        fs.mkdirSync(dir);\r\n        copyFolderRecursiveSync(`${plugindir}/${plugin}/types`,dir,false);\r\n      }\r\n      if(!fs.existsSync(`${plugindir}/${plugin}`))return;\r\n      var options = {\r\n      \tpath: `${plugindir}/${plugin}`,\r\n      \tforceInstall: false,\r\n      \tnpmLoad: {\r\n      \t\tloglevel: 'silent'\r\n      \t}\r\n      };\r\n      npmi(options, function (err) {\r\n      \tif (err) {\r\n          if(callback)callback(err);\r\n      \t\tif (err.code === npmi.LOAD_ERR) console.log('npm load error');\r\n      \t\telse if (err.code === npmi.INSTALL_ERR) console.log('npm install error');\r\n      \t\treturn console.log(err.message);\r\n      \t}\r\n\r\n        if(callback)callback();\r\n\r\n      \t// installed\r\n      \tconsole.log('Installed dependencies successfully in '+Path.resolve(options.path));\r\n      });\r\n    }catch(e) {callback(e);e.printStackTrace()}\r\n  }\r\n\r\n  /**\r\n   * @function loadPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   *\r\n   * @copyright (c) Minimine 2018\r\n   * @description Loads the plugins\r\n   *\r\n   */\r\n  loadPlugins(plugindir:string,callback: CallbackFunction = function() {}): void {\r\n    let THIS = this;\r\n    THIS.readyPluginDir(plugindir)\r\n    if(!fs.existsSync(plugindir))fs.mkdirSync(plugindir);\r\n    let plugins = this.getPlugins(plugindir);\r\n    let x:boolean[] = [];\r\n    plugins.forEach((e,i) => {\r\n      x[i] = false;\r\n      THIS.readyPlugin(plugindir,e, function() {\r\n        x[i] = true;\r\n        let ready = true;\r\n        x.forEach((b) => {\r\n          if(!b)ready = false;\r\n        })\r\n        if(ready) {\r\n          plugins.forEach((e) => {THIS.plugins.push(THIS.loadPlugin(plugindir,e))});\r\n          if(callback)callback();\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @function loadPlugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Loads a Plugin\r\n   * @param plugin the Plugin to load\r\n   * @return the plugin main file default class\r\n   *\r\n   */\r\n  loadPlugin(plugindir:string,plugin:string): Plugin {\r\n    if(!fs.existsSync(`${plugindir}/${plugin}/`)) throw new Error(`Plugin ${plugin} does not exists in plugindir ${plugindir}`);\r\n\r\n    if(fs.existsSync(`${plugindir}/${plugin}/types`)) {\r\n      let node_modules = `${plugindir}/node_modules`;\r\n      if(!fs.existsSync(node_modules)) fs.mkdirSync(node_modules);\r\n      if(!fs.existsSync(`${node_modules}/@mcscriptstudiocodeplugins`)) fs.mkdirSync(`${node_modules}/@mcscriptstudiocodeplugins`);\r\n      let dir = `${node_modules}/@mcscriptstudiocodeplugins/${plugin}`;\r\n      if(fs.existsSync(dir))deleteFolderRecursive(dir);\r\n      fs.mkdirSync(dir);\r\n      copyFolderRecursiveSync(`${plugindir}/${plugin}/types`,dir,false);\r\n    }\r\n\r\n    let desc = this.getPluginDescription(plugindir,plugin);\r\n    let {name, url, author, author_url, version, main} = desc;\r\n    let dependencies:Dependency[] = [];\r\n    if(desc.pluginDependencies) {\r\n      for(let i in desc.pluginDependencies) {\r\n        if(!fs.existsSync(plugindir+\"/\"+desc.pluginDependencies[i].name)) {\r\n          console.log(\"installing plugin \"+desc.pluginDependencies[i].name+\" from \\\"\"+desc.pluginDependencies[i].url+\"\\\" caused of a dependency of plugin \\\"\"+name+\"\\\"\")\r\n          this.installPlugin(desc.pluginDependencies[i].url,plugindir)\r\n        }\r\n\r\n        var dependency:Dependency = new Dependency(desc.pluginDependencies[i].name,desc.pluginDependencies[i].url,plugindir,name);\r\n        dependencies.push(dependency)\r\n      }\r\n    }\r\n    if(!fs.existsSync(`${plugindir}/${plugin}/${main}`)) throw new Error(`Plugin main from plugin ${plugin} does not exists`);\r\n    let Plugin = require(`${plugindir}/${plugin}/${main}`).default;\r\n    return new Plugin(name, url, author, author_url, version, main, dependencies, `${plugindir}/${plugin}`);\r\n  }\r\n\r\n  /**\r\n   * @function setupPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description setups the plugins\r\n   *\r\n   */\r\n  setupPlugins(): void {\r\n    for(let plugin of this.plugins) plugin.setup(this.api);\r\n  }\r\n\r\n  /**\r\n   * @function startPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Starts the plugins\r\n   *\r\n   */\r\n  startPlugins(): void {\r\n    for(let plugin of this.plugins) plugin.start(this.api);\r\n  }\r\n\r\n  /**\r\n   * @function stopPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description stops the plugins\r\n   *\r\n   */\r\n  stopPlugins(): void {\r\n    for(let plugin of this.plugins) plugin.stop(this.api);\r\n  }\r\n\r\n  /**\r\n   * @function reloadPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description reloads the plugins\r\n   *\r\n   */\r\n  reloadPlugins(): void {\r\n    for(let plugin of this.plugins) plugin.reload(this.api);\r\n  }\r\n\r\n  /**\r\n   * @function getPluginDescription\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description returns the description of a plugin\r\n   * @param plugin the Plugin to load\r\n   * @return the package.json content\r\n   *\r\n   */\r\n  getPluginDescription(plugindir:string,plugin:string): any {\r\n    try {\r\n      return JSON.parse(fs.readFileSync(`${plugindir}/${plugin}/package.json`).toString());\r\n    } catch(e) {\r\n      console.error(\"Error reading plugindescription of plugin \" + plugin + \": \", e);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function getPlugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description scans for plugins in the plugindir\r\n   * @return the plugins in the plugindir\r\n   *\r\n   */\r\n  getPlugins(plugindir): string[] {\r\n    let ret = [];\r\n    for(let i of fs.readdirSync(plugindir)) {\r\n      if(fs.lstatSync(plugindir + \"/\" + i).isDirectory()&&i.toLowerCase()!=\"node_modules\")ret.push(i);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * @function fireEvent\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   * @description register a listener\r\n   *\r\n   * @param event the Event to fire\r\n   */\r\n  fireEvent(event:Event):Event {\r\n    return this.api.fireEvent(event);\r\n  }\r\n\r\n  /**\r\n   * @function installPlugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   * @description install a plugin (by url into pluginfolder)\r\n   *\r\n   * @param url the url\r\n   * @param pluginfolder the pluginfoder\r\n   */\r\n  installPlugin(url:string, pluginfolder:string) {\r\n    let THIS = this;\r\n    SiteAPI.loadSite(SiteAPI.parseURL(url), function(res) {\r\n      res = JSON.parse(res);\r\n      if(!fs.existsSync(pluginfolder + \"/\" + res.name)) {\r\n        let zipfile:string = `${pluginfolder}/${res.name}.tmp.zip`;\r\n        SiteAPI.downloadFile(zipfile,res.versions[res.newestversion], function() {\r\n          extract(zipfile, {dir: `${pluginfolder}/${res.name}`}, function (err) {\r\n            if(err)console.log(err);\r\n            else {\r\n              fs.unlinkSync(zipfile);\r\n              THIS.readyPlugin(pluginfolder,res.name);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @class ServerApi\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.2\r\n * @version 0.0.2\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description The Api to manage the server\r\n *\r\n */\r\nclass ServerApi {\r\n\r\n  /**\r\n   * @var listeners\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description contains the listeners\r\n   *\r\n   */\r\n  listeners:Array<Listener> = [];\r\n\r\n  /**\r\n   * @var apis\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the api register (can be got)\r\n   *\r\n   */\r\n  apis: any = {};\r\n\r\n  /**\r\n   * @var manager\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The the plugin manager\r\n   *\r\n   */\r\n  manager: PluginManager;\r\n\r\n  /**\r\n   * @var plugins\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description All the registered Plugins\r\n   *\r\n   */\r\n  plugins: Plugin[];\r\n\r\n  /**\r\n   * @function constructor\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Constructorclass for the ServerApi\r\n   */\r\n  constructor(manager:PluginManager) {\r\n    this.manager = manager;\r\n    this.plugins = manager.plugins;\r\n  }\r\n\r\n  /**\r\n   * @function on\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description register a function as listener by event name\r\n   * @deprecated Use ServerApi#registerListener(Listener)\r\n   * @param event the event to listen for\r\n   * @param func the function to execute when event appears\r\n   */\r\n  on(event:string, func:Function) {\r\n    this.registerListener(new OnListener(event,func));\r\n  }\r\n\r\n  /**\r\n   * @function registerListener\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description register a listener\r\n   * @param listener the listener to register\r\n   */\r\n  registerListener(listener:Listener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  /**\r\n   * @function fireEvent\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description register a listener\r\n   * @param event the Event to fire\r\n   *\r\n   */\r\n  fireEvent(event:Event):Event {\r\n    let type = event.getType();\r\n    for(let listener of this.listeners) {\r\n      if(listener.getType()==type) {\r\n        listener.run(event);\r\n      }\r\n    }\r\n    return event;\r\n  }\r\n\r\n\r\n  /**\r\n   * @function addStylesheet\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description loads a css stylesheet via a <link> tag\r\n   * @param stylesheet the script path\r\n   *\r\n   */\r\n  addStylesheet(stylesheet:string) {\r\n    if (!document.getElementById(stylesheet)) {\r\n      var head:HTMLHeadElement  = document.getElementsByTagName('head')[0];\r\n      var link:HTMLLinkElement  = document.createElement('link');\r\n      link.id = stylesheet;\r\n      link.rel  = 'stylesheet';\r\n      link.type = 'text/css';\r\n      link.href = stylesheet;\r\n      link.media = 'all';\r\n      head.appendChild(link);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @function addScript\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @deprecated please use require(yourscript) instead\r\n   * @description loads a javascript via a <script src=\"yourscript\"></script>\r\n   * @param script the element's path\r\n   *\r\n   */\r\n  addScript(script:string) {\r\n    console.warn(\"Please use require(yourscript) instead of the deprecated method ServerApi#addScript()\");\r\n    //console.log(`Loaded script from \"${script}\"`);\r\n    if (!document.getElementById(script)) {\r\n      var head:HTMLHeadElement  = document.getElementsByTagName('head')[0];\r\n      var link:HTMLScriptElement  = document.createElement('script');\r\n      link.id = script;\r\n      link.type = 'text/javascript';\r\n      link.src = script;\r\n      head.appendChild(link);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @function addElement\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description adds an element to the document's body\r\n   * @param element the element to add\r\n   *\r\n   */\r\n  addElement(element:string|HTMLElement) {\r\n    if(element instanceof HTMLElement)document.body.appendChild(element);\r\n    else $(\"body\").append(element);\r\n  }\r\n\r\n  /**\r\n   * @function registerAPI\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n\r\n   * @description register a api\r\n   * @param key the api key\r\n   * @param api the api\r\n   */\r\n  registerAPI(key:string, api:any):void {\r\n    this.apis[key] = api;\r\n  }\r\n\r\n  /**\r\n   * @function getAPI\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n\r\n   * @description get a api\r\n   * @param key the api key\r\n   * @return the api\r\n   */\r\n  getAPI(key:string):any {\r\n    return this.apis[key];\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Plugin\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.2\r\n * @version 0.0.2\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description the plugin definition\r\n * @abstract\r\n *\r\n */\r\nabstract class Plugin {\r\n\r\n  /**\r\n   * @var name\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin's name\r\n   *\r\n   */\r\n  name:string;\r\n\r\n  /**\r\n   * @var url\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin's url\r\n   *\r\n   */\r\n  url:string;\r\n\r\n  /**\r\n   * @var author\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin's author(s)\r\n   *\r\n   */\r\n  author:string|string[];\r\n\r\n  /**\r\n   * @var author_url\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin authors's url(s)\r\n   *\r\n   */\r\n  author_url:string|string[];\r\n\r\n  /**\r\n   * @var version\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin's version\r\n   *\r\n   */\r\n  version:string;\r\n\r\n  /**\r\n   * @var main\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin's main file\r\n   *\r\n   */\r\n  main:string;\r\n\r\n  /**\r\n   * @var dependencies\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin's dependencies\r\n   *\r\n   */\r\n  dependencies: Dependency[];\r\n\r\n  /**\r\n   * @var path\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin's path\r\n   *\r\n   */\r\n  path: string;\r\n\r\n  /**\r\n   * @function constructor\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Constructor for the Plugin class\r\n   * @param name the plugin's name\r\n   * @param url the plugin's url\r\n   * @param author the plugin's author(s)\r\n   * @param author_url the plugin author's url(s)\r\n   * @param version the plugin's version\r\n   * @param main the plugin's main file\r\n   *\r\n   */\r\n  constructor(name:string, url:string, author:string|string[], author_url:string|string[], version:string, main:string, dependencies:Dependency[], path:string) {\r\n    this.name = name;\r\n    this.url = url;\r\n    this.author = author;\r\n    this.author_url = author_url;\r\n    this.version = version;\r\n    this.main = main;\r\n    this.dependencies = dependencies;\r\n    this.path = path;\r\n  }\r\n\r\n  /**\r\n   * @function setup\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The setup method for the plugin\r\n   * @param server the server APIs\r\n   * @abstract\r\n   *\r\n   */\r\n  abstract setup(server:ServerApi);\r\n\r\n  /**\r\n   * @function start\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The start method for the plugin\r\n   * @param server the server APIs\r\n   * @abstract\r\n   *\r\n   */\r\n  abstract start(server:ServerApi);\r\n\r\n  /**\r\n   * @function register\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The stop method for the plugin\r\n   * @param server the server APIs\r\n   * @abstract\r\n   *\r\n   */\r\n  abstract stop(server:ServerApi);\r\n\r\n  /**\r\n   * @function register\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description The reload method for the plugin\r\n   * @param server the server APIs\r\n   * @abstract\r\n   *\r\n   */\r\n  abstract reload(server:ServerApi);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @class Dependency\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.3\r\n * @version 0.0.3\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description the dependency definition\r\n * @abstract\r\n *\r\n */\r\nclass Dependency {\r\n\r\n  /**\r\n   * @var name\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the dependencies name\r\n   *\r\n   */\r\n  name:string;\r\n\r\n  /**\r\n   * @var name\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the dependencies name\r\n   *\r\n   */\r\n  url:string;\r\n\r\n  /**\r\n   * @var plugin\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the plugin\r\n   *\r\n   */\r\n  plugin:Plugin;\r\n\r\n  /**\r\n   * @function constructor\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.3\r\n   * @version 0.0.3\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Constructor for the Dependency class\r\n   * @param name the plugin's name\r\n   * @param url the plugin's url\r\n   *\r\n   */\r\n  constructor(name:string, url:string, plugindir:string, requiredBy:string) {\r\n    this.name = name;\r\n    this.url = url;\r\n    if(!fs.existsSync(`${plugindir}/${name}/`))manager.installPlugin(url,plugindir);\r\n    if(fs.existsSync(`${plugindir}/${name}/`))this.plugin = manager.loadPlugin(plugindir,name);\r\n    else throw new Error(`The dependency ${name} in ${requiredBy} has an wrong import!`);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n Events\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n */\r\n\r\n\r\n\r\n\r\n\r\n /**\r\n  * @interface Event\r\n  * @author Minimine <https://github.com/miniminelp>\r\n  * @since 0.0.2\r\n  * @version 0.0.2\r\n  * @license MIT\r\n  * @copyright (c) Minimine 2018\r\n  *\r\n  * @description Event interface\r\n  *\r\n  */\r\ninterface Event {\r\n\r\n  /**\r\n   * @function getType\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Returns the event's type\r\n   *\r\n   */\r\n  getType():string;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @interface CancelableEvent\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.2\r\n * @version 0.0.2\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description CancelableEvent Event\r\n * @extends Event\r\n *\r\n */\r\ninterface CancelableEvent extends Event {\r\n\r\n  /**\r\n   * @var canceled\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description saves if the event is canceled\r\n   *\r\n   */\r\n  canceled: boolean;\r\n\r\n  /**\r\n   * @function cancel\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description cancels the Event (or the default reaction)\r\n   *\r\n   */\r\n  cancel();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n Listeners\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n */\r\n\r\n\r\n\r\n\r\n /**\r\n  * @interface Listener\r\n  * @author Minimine <https://github.com/miniminelp>\r\n  * @since 0.0.2\r\n  * @version 0.0.2\r\n  * @license MIT\r\n  * @copyright (c) Minimine 2018\r\n  *\r\n  * @description The Listener inteface.\r\n  */\r\ninterface Listener {\r\n\r\n  /**\r\n   * @function getType\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description get the listener type (the event the listener is waiting for)\r\n   * @return the type\r\n   *\r\n   */\r\n  getType():string;\r\n\r\n  /**\r\n   * @function run\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Runs the listener\r\n   * @param event the Event\r\n   *\r\n   */\r\n  run(event:Event):void;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @class OnListener\r\n * @implements Listener\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.2\r\n * @version 0.0.2\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description Listening for a event by name (deprecated)\r\n * @deprecated on-Listeners are deprecated, make Listeners from the Listener interface\r\n *\r\n */\r\nclass OnListener implements Listener {\r\n\r\n  /**\r\n   * @var trigger\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the trigger event\r\n   *\r\n   */\r\n  trigger:string;\r\n\r\n  /**\r\n   * @var func\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description Executed when event apears\r\n   *\r\n   */\r\n  func:Function;\r\n\r\n  /**\r\n   * @function constructor\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description the constructor vor OnListener\r\n   * @param trigger the trigger\r\n   * @param func the Function to execute when the event apears\r\n   *\r\n   */\r\n  constructor(trigger:string, func:Function) {\r\n    this.trigger=trigger;\r\n    this.func=func;\r\n  }\r\n\r\n  /**\r\n   * @see Listener#run\r\n   *\r\n   * @function run\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description executed when the event apears\r\n   * @param event the event\r\n   *\r\n   */\r\n  run(event: Event) {\r\n    this.func(event);\r\n  }\r\n\r\n  /**\r\n   * @see Listener#getType\r\n   *\r\n   * @function getType\r\n   * @author Minimine <https://github.com/miniminelp>\r\n   * @since 0.0.2\r\n   * @version 0.0.2\r\n   * @license MIT\r\n   * @copyright (c) Minimine 2018\r\n   *\r\n   * @description returns the type of the event\r\n   * @return the Event type\r\n   */\r\n  getType(): string {\r\n    return this.trigger;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n Functions\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n */\r\n\r\n\r\n\r\n\r\n /**\r\n  * @function CallbackFunction\r\n  * @author Minimine <https://github.com/miniminelp>\r\n  * @since 0.0.3\r\n  * @version 0.0.3\r\n  * @license MIT\r\n  * @copyright (c) Minimine 2018\r\n  *\r\n  * @description A callback function type\r\n  * @param err the error (Error | undefined)\r\n  * @param res the result (String | undefined)\r\n  *\r\n  */\r\ninterface CallbackFunction {\r\n  (err?:Error|undefined, res?:string|undefined):void\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @function guid\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.1\r\n * @version 0.0.1\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description returns a random uuid\r\n * @return random uuid\r\n *\r\n */\r\nfunction guid() {\r\n  function s4() {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n        .toString(16)\r\n        .substring(1);\r\n  }\r\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @function copyFileSync\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.3\r\n * @version 0.0.3\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description copys a file\r\n * @param source the source file\r\n * @param target the paste target\r\n *\r\n */\r\nfunction copyFileSync( source, target ) {\r\n  var targetFile = target;\r\n  if ( fs.existsSync( target ) ) {\r\n    if ( fs.lstatSync( target ).isDirectory() ) {\r\n      targetFile = Path.join( target, Path.basename( source ) );\r\n    }\r\n  }\r\n  fs.writeFileSync(targetFile, fs.readFileSync(source));\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @function copyFolderRecursiveSync\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.3\r\n * @version 0.0.3\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description copys a folder recursively\r\n * @param source the source folder\r\n * @param target the paste target\r\n * @param useOldName should a sub folder created with the old name? default: true\r\n *\r\n */\r\nfunction copyFolderRecursiveSync( source: string, target: string, useOldName:boolean = true ) {\r\n  var files = [];\r\n  var targetFolder = target;\r\n  if(useOldName)targetFolder = Path.join( target, Path.basename( source ) );\r\n  if ( !fs.existsSync( targetFolder ) ) {\r\n    fs.mkdirSync( targetFolder );\r\n  }\r\n  if ( fs.lstatSync( source ).isDirectory() ) {\r\n    files = fs.readdirSync( source );\r\n    files.forEach( function ( file ) {\r\n      var curSource = Path.join( source, file );\r\n      if ( fs.lstatSync( curSource ).isDirectory() ) {\r\n        copyFolderRecursiveSync( curSource, targetFolder );\r\n      } else {\r\n        copyFileSync( curSource, targetFolder );\r\n      }\r\n    } );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @function deleteFolderRecursive\r\n * @author Minimine <https://github.com/miniminelp>\r\n * @since 0.0.3\r\n * @version 0.0.3\r\n * @license MIT\r\n * @copyright (c) Minimine 2018\r\n *\r\n * @description deletes a folder recursively\r\n * @param path the folder to delete\r\n *\r\n */\r\nfunction deleteFolderRecursive (path: fs.PathLike) {\r\n  if (fs.existsSync(path)) {\r\n    fs.readdirSync(path).forEach(function(file){\r\n      var curPath = path + \"/\" + file;\r\n      if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n        deleteFolderRecursive(curPath);\r\n      } else { // delete file\r\n        fs.unlinkSync(curPath);\r\n      }\r\n    });\r\n    fs.rmdirSync(path);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n Static\r\n **********************************************************************************************************************************\r\n **********************************************************************************************************************************\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n /*\r\n  **********************************************************************************************************************************\r\n  **********************************************************************************************************************************\r\n  Exports\r\n  **********************************************************************************************************************************\r\n  **********************************************************************************************************************************\r\n  */\r\n\r\n// Make classes global usable\r\nglobal.Plugin = Plugin\r\nglobal.ServerApi = ServerApi\r\nglobal.PluginManager = PluginManager\r\nglobal.Event = Event\r\nglobal.OnListener = OnListener\r\nglobal.guid = guid\r\nglobal.deleteFolderRecursive = deleteFolderRecursive\r\nglobal.copyFolderRecursiveSync = copyFolderRecursiveSync\r\nglobal.copyFileSync = copyFileSync\r\n\r\n// Export and return on require / import\r\nexport default PluginManager;\r\n\r\nexport {\r\n  // Standart APIs\r\n  Plugin, ServerApi, PluginManager,\r\n\r\n  // Events\r\n  Event, CancelableEvent,\r\n\r\n  // Listeners\r\n  Listener, OnListener,\r\n\r\n  // Functions\r\n  guid,\r\n};\r\n"]}