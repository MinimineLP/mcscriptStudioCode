{"version":3,"sources":["Config.js","Config.ts"],"names":["exports","__esModule","YAML","require","fs","Config","file","parser","FileFormatters","Json","fromString","this","existsSync","parts","replace","split","i","length","path","c","mkdirSync","writeFileSync","load","prototype","content","parse","readFileSync","save","stringify","contains","obj","subparts","hasOwnProperty","Object","join","get","console","log","set","val","cmd","eval","remove","setStandart","concat","_this","list","forEach","e","apply","keys","ret","v","push","JSONFormatter","JSON","YAMLFormatter","safeDump","safeLoad","Yaml","from","toLowerCase","config","loadConfig","global"],"mappings":"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","file":"Config.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar YAML = require(\"js-yaml\");\nvar fs = require(\"fs\");\nvar Config = /** @class */ (function () {\n    function Config(file, parser) {\n        if (parser === void 0) { parser = FileFormatters.Json; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        this.parser = parser;\n        this.file = file;\n        if (!fs.existsSync(file)) {\n            file = file.replace(\"\\\\\", \"/\");\n            var parts = file.split(\"/\");\n            for (var i = 1; i < parts.length; i++) {\n                var path = \"\";\n                for (var c = 0; c < i; c++)\n                    path += parts[c] + \"/\";\n                if (!fs.existsSync(path))\n                    fs.mkdirSync(path);\n            }\n            fs.writeFileSync(file, \"\");\n        }\n        this.load();\n    }\n    Config.prototype.load = function (file, parser) {\n        if (file === void 0) { file = this.file; }\n        if (parser === void 0) { parser = this.parser; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        this.content = parser.parse(fs.readFileSync(file, 'utf8'));\n        if (this.content == null)\n            this.content = {};\n    };\n    Config.prototype.save = function (file, parser) {\n        if (file === void 0) { file = this.file; }\n        if (parser === void 0) { parser = this.parser; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        fs.writeFileSync(file, parser.stringify(this.content));\n    };\n    Config.prototype.stringify = function (parser) {\n        if (parser === void 0) { parser = this.parser; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        return parser.stringify(this.content);\n    };\n    Config.prototype.contains = function (path, obj) {\n        if (obj === void 0) { obj = this.content; }\n        var parts = path.split(/\\./g);\n        var subparts = [];\n        if (obj.hasOwnProperty(parts[0])) {\n            for (var i = 1; i < parts.length; i++)\n                subparts[i - 1] = parts[i];\n            if (obj[parts[0]] instanceof Object)\n                return this.contains(subparts.join(\".\"), obj[parts[0]]);\n            return true;\n        }\n        return false;\n    };\n    Config.prototype.get = function (path, obj) {\n        if (obj === void 0) { obj = this.content; }\n        if (this.contains(path, obj)) {\n            var parts = path.split(/\\./g);\n            for (var i = 0; i < parts.length; i++) {\n                obj = obj[parts[i]];\n            }\n            return obj;\n        }\n        else {\n            console.log(\"Ooups... Trying to get empty path from Yaml: \\\"\" + path + \"\\\" Returning null!\");\n            return null;\n        }\n    };\n    Config.prototype.set = function (path, val) {\n        var parts = path.split(\".\");\n        var obj = this.content;\n        for (var i = 0; i < parts.length - 1; i++) {\n            if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object))\n                obj[parts[i]] = {};\n            obj = obj[parts[i]];\n        }\n        var cmd = 'this.content.' + path + ' = val;';\n        eval(cmd);\n    };\n    Config.prototype.remove = function (path) {\n        var parts = path.split(\".\");\n        var obj = this.content;\n        for (var i = 0; i < parts.length - 1; i++) {\n            if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object))\n                obj[parts[i]] = {};\n            obj = obj[parts[i]];\n        }\n        var cmd = 'delete this.content.\"' + path + ';';\n        eval(cmd);\n    };\n    Config.prototype.setStandart = function (path, val) {\n        if (!this.contains(path))\n            this.set(path, val);\n    };\n    Config.prototype.concat = function (obj) {\n        var _this = this;\n        if (obj instanceof Config) {\n            obj.list().forEach(function (e) {\n                if (!_this.contains(e))\n                    _this.set(e, obj.get(e));\n            });\n        }\n        else {\n            this.list(obj).forEach(function (e) {\n                if (!_this.contains(e))\n                    _this.set(e, _this.get(e, obj));\n            });\n        }\n    };\n    Config.prototype.apply = function (obj) {\n        var _this = this;\n        if (obj instanceof Config) {\n            obj.list().forEach(function (e) {\n                _this.set(e, obj.get(e));\n            });\n        }\n        else {\n            this.list(obj).forEach(function (e) {\n                _this.set(e, _this.get(e, obj));\n            });\n        }\n    };\n    Config.prototype.list = function (obj) {\n        var _this = this;\n        if (obj === void 0) { obj = this.content; }\n        var keys = Object.keys(obj);\n        var ret = [];\n        keys.forEach(function (e) {\n            if (obj[e] instanceof Object) {\n                _this.list(obj[e]).forEach(function (v) {\n                    ret.push(e + \".\" + v);\n                });\n            }\n            else\n                ret.push(e);\n        });\n        return ret;\n    };\n    return Config;\n}());\nexports.Config = Config;\nvar FileFormatters;\n(function (FileFormatters) {\n    var JSONFormatter = /** @class */ (function () {\n        function JSONFormatter() {\n            this.stringify = JSON.stringify;\n            this.parse = JSON.parse;\n        }\n        return JSONFormatter;\n    }());\n    var YAMLFormatter = /** @class */ (function () {\n        function YAMLFormatter() {\n            this.stringify = YAML.safeDump;\n            this.parse = YAML.safeLoad;\n        }\n        return YAMLFormatter;\n    }());\n    FileFormatters.Json = new JSONFormatter();\n    FileFormatters.Yaml = new YAMLFormatter();\n    function fromString(from) {\n        from = from.toLowerCase();\n        if (from == \"json\")\n            return this.Json;\n        else if (from == \"yaml\")\n            return this.Yaml;\n        else\n            return null;\n    }\n    FileFormatters.fromString = fromString;\n})(FileFormatters || (FileFormatters = {}));\nexports.FileFormatters = FileFormatters;\nvar config = new Config(\"config.yml\", FileFormatters.Yaml);\nexports.config = config;\nloadConfig();\nfunction loadConfig() {\n    config.load();\n    config.save();\n}\nglobal.FileFormatters = FileFormatters;\nglobal.Config = Config;\nglobal.config = config;\nexports[\"default\"] = config;\n","import * as YAML from 'js-yaml'\r\nimport * as fs from 'fs'\r\n\r\ndeclare let global:any;\r\n\r\nclass Config {\r\n\r\n  file: string;\r\n  content: any;\r\n  parser: FileFormatters.FileFormatter;\r\n\r\n  constructor(file:string,parser:string|FileFormatters.FileFormatter = FileFormatters.Json) {\r\n    if(typeof parser === \"string\")parser = FileFormatters.fromString(parser);\r\n    this.parser = parser;\r\n    this.file = file;\r\n    if (!fs.existsSync(file)) {\r\n      file = file.replace(\"\\\\\", \"/\");\r\n      let parts = file.split(\"/\");\r\n      for (let i = 1; i < parts.length; i++) {\r\n        let path = \"\";\r\n        for (let c = 0; c < i; c++)\r\n          path += parts[c] + \"/\";\r\n        if (!fs.existsSync(path)) fs.mkdirSync(path);\r\n      }\r\n      fs.writeFileSync(file, \"\");\r\n    }\r\n    this.load();\r\n  }\r\n\r\n  load(file = this.file, parser:string|FileFormatters.FileFormatter = this.parser) {\r\n    if(typeof parser === \"string\")parser = FileFormatters.fromString(parser);\r\n    this.content = parser.parse(fs.readFileSync(file, 'utf8'));\r\n    if (this.content == null) this.content = {};\r\n  }\r\n\r\n  save(file = this.file, parser:string|FileFormatters.FileFormatter = this.parser) {\r\n    if(typeof parser === \"string\")parser = FileFormatters.fromString(parser);\r\n    fs.writeFileSync(file, parser.stringify(this.content));\r\n  }\r\n\r\n  stringify(parser:string|FileFormatters.FileFormatter = this.parser):string {\r\n    if(typeof parser === \"string\")parser = FileFormatters.fromString(parser);\r\n    return parser.stringify(this.content)\r\n  }\r\n\r\n  contains(path:string, obj = this.content) {\r\n    let parts:Array<string> = path.split(/\\./g);\r\n    let subparts:Array<string> = [];\r\n    if (obj.hasOwnProperty(parts[0])) {\r\n      for(let i=1;i<parts.length;i++) subparts[i-1] = parts[i];\r\n      if (obj[parts[0]] instanceof Object) return this.contains(subparts.join(\".\"), obj[parts[0]]);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  get(path:string, obj = this.content) {\r\n    if (this.contains(path,obj)) {\r\n      let parts = path.split(/\\./g);\r\n      for (let i = 0; i < parts.length; i++) {\r\n        obj = obj[parts[i]];\r\n      }\r\n      return obj;\r\n    } else {\r\n      console.log(`Ooups... Trying to get empty path from Yaml: \"${path}\" Returning null!`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  set(path:string, val:any) {\r\n\r\n    let parts = path.split(\".\");\r\n    let obj = this.content;\r\n\r\n    for (let i = 0; i < parts.length - 1; i++) {\r\n      if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object)) obj[parts[i]] = {};\r\n      obj = obj[parts[i]];\r\n    }\r\n\r\n    let cmd = 'this.content.' + path +' = val;';\r\n    eval(cmd);\r\n\r\n  }\r\n\r\n  remove(path:string) {\r\n\r\n    let parts = path.split(\".\");\r\n    let obj = this.content;\r\n\r\n    for (let i = 0; i < parts.length - 1; i++) {\r\n      if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object)) obj[parts[i]] = {};\r\n      obj = obj[parts[i]];\r\n    }\r\n\r\n    let cmd = 'delete this.content.\"' + path +';';\r\n    eval(cmd)\r\n\r\n  }\r\n\r\n  setStandart(path:string, val:any) {\r\n    if (!this.contains(path)) this.set(path, val);\r\n  }\r\n\r\n  concat(obj:object|Config) {\r\n    if(obj instanceof Config) {\r\n      obj.list().forEach((e:string) => {\r\n        if(!this.contains(e))this.set(e,obj.get(e));\r\n      });\r\n    }\r\n    else {\r\n      this.list(obj).forEach((e:string) => {\r\n        if(!this.contains(e))this.set(e, this.get(e, obj));\r\n      });\r\n    }\r\n  }\r\n\r\n  apply(obj:object|Config) {\r\n    if(obj instanceof Config) {\r\n      obj.list().forEach((e:string) => {\r\n        this.set(e,obj.get(e));\r\n      });\r\n    }\r\n    else {\r\n      this.list(obj).forEach((e:string) => {\r\n        this.set(e, this.get(e, obj));\r\n      });\r\n    }\r\n  }\r\n\r\n  list(obj:Object = this.content):string[] {\r\n    let keys = Object.keys(obj);\r\n    let ret:string[] = [];\r\n    keys.forEach((e) => {\r\n      if(obj[e] instanceof Object) {\r\n        this.list(obj[e]).forEach((v) => {\r\n          ret.push(e+\".\"+v);\r\n        });\r\n      }\r\n      else ret.push(e);\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n\r\nmodule FileFormatters {\r\n\r\n  export interface FileFormatter {\r\n    stringify(object:any):string;\r\n    parse(string:string):any;\r\n  }\r\n\r\n  class JSONFormatter implements FileFormatter {\r\n    stringify = JSON.stringify;\r\n    parse = JSON.parse;\r\n  }\r\n\r\n  class YAMLFormatter implements FileFormatter {\r\n    stringify = YAML.safeDump;\r\n    parse = YAML.safeLoad;\r\n  }\r\n\r\n  export let Json:FileFormatter = new JSONFormatter();\r\n  export let Yaml:FileFormatter = new YAMLFormatter();\r\n\r\n  export function fromString(from:string):FileFormatter {\r\n    from = from.toLowerCase();\r\n    if(from==\"json\")return this.Json;\r\n    else if(from==\"yaml\")return this.Yaml;\r\n    else return null;\r\n  }\r\n}\r\n\r\nlet config:Config = new Config(\"config.yml\",FileFormatters.Yaml);\r\nloadConfig();\r\n\r\nfunction loadConfig() {\r\n  config.load();\r\n  config.save();\r\n}\r\n\r\nglobal.FileFormatters = FileFormatters;\r\nglobal.Config = Config;\r\nglobal.config = config;\r\n\r\nexport default config;\r\nexport {Config, FileFormatters, config}\r\n"]}