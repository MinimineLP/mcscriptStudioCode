{"version":3,"sources":["Config.js","Config.ts"],"names":["exports","__esModule","YAML","require","fs","Config","file","parser","FileFormatters","Json","fromString","existsSync","replace","parts","split","i","length","path","c","mkdirSync","writeFileSync","load","prototype","content","parse","readFileSync","save","stringify","contains","obj","subparts","hasOwnProperty","Object","join","get","console","log","set","val","cmd","eval","remove","setStandart","concat","_this","list","forEach","e","apply","keys","ret","v","push","JSONFormatter","JSON","YAMLFormatter","safeDump","safeLoad","Yaml","from","toLowerCase","config","loadConfig","global"],"mappings":"AAAA;;AACAA,QAAQC,UAAR,GAAqB,IAArB;ACDA,IAAAC,OAAAC,QAAA,SAAA,CAAA;AACA,IAAAC,KAAAD,QAAA,IAAA,CAAA;AAIA,IAAAE,SAAA,aAAA,YAAA;AAKE,aAAAA,MAAA,CACEC,IADF,EAEEC,MAFF,EAEqE;AAAnE,YAAAA,WAAA,KAAA,CAAA,EAAA;AAAAA,qBAAgDC,eAAeC,IAA/D;AAAmE;AAEnE,YAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgCA,SAASC,eAAeE,UAAf,CAA0BH,MAA1B,CAAT;AAChC,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKD,IAAL,GAAYA,IAAZ;AACA,YAAI,CAACF,GAAGO,UAAH,CAAcL,IAAd,CAAL,EAA0B;AACxBA,mBAAOA,KAAKM,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACA,gBAAIC,QAAQP,KAAKQ,KAAL,CAAW,GAAX,CAAZ;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,oBAAIE,OAAO,EAAX;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,CAApB,EAAuBG,GAAvB;AAA4BD,4BAAQJ,MAAMK,CAAN,IAAW,GAAnB;AAA5B,iBACA,IAAI,CAACd,GAAGO,UAAH,CAAcM,IAAd,CAAL,EAA0Bb,GAAGe,SAAH,CAAaF,IAAb;AAC3B;AACDb,eAAGgB,aAAH,CAAiBd,IAAjB,EAAuB,EAAvB;AACD;AACD,aAAKe,IAAL;AACD;AAEDhB,WAAAiB,SAAA,CAAAD,IAAA,GAAA,UACEf,IADF,EAEEC,MAFF,EAE6D;AAD3D,YAAAD,SAAA,KAAA,CAAA,EAAA;AAAAA,mBAAO,KAAKA,IAAZ;AAAgB;AAChB,YAAAC,WAAA,KAAA,CAAA,EAAA;AAAAA,qBAAgD,KAAKA,MAArD;AAA2D;AAE3D,YAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgCA,SAASC,eAAeE,UAAf,CAA0BH,MAA1B,CAAT;AAChC,aAAKgB,OAAL,GAAehB,OAAOiB,KAAP,CAAapB,GAAGqB,YAAH,CAAgBnB,IAAhB,EAAsB,MAAtB,CAAb,CAAf;AACA,YAAI,KAAKiB,OAAL,IAAgB,IAApB,EAA0B,KAAKA,OAAL,GAAe,EAAf;AAC3B,KAPD;AASAlB,WAAAiB,SAAA,CAAAI,IAAA,GAAA,UACEpB,IADF,EAEEC,MAFF,EAE6D;AAD3D,YAAAD,SAAA,KAAA,CAAA,EAAA;AAAAA,mBAAO,KAAKA,IAAZ;AAAgB;AAChB,YAAAC,WAAA,KAAA,CAAA,EAAA;AAAAA,qBAAgD,KAAKA,MAArD;AAA2D;AAE3D,YAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgCA,SAASC,eAAeE,UAAf,CAA0BH,MAA1B,CAAT;AAChCH,WAAGgB,aAAH,CAAiBd,IAAjB,EAAuBC,OAAOoB,SAAP,CAAiB,KAAKJ,OAAtB,CAAvB;AACD,KAND;AAQAlB,WAAAiB,SAAA,CAAAK,SAAA,GAAA,UACEpB,MADF,EAC6D;AAA3D,YAAAA,WAAA,KAAA,CAAA,EAAA;AAAAA,qBAAgD,KAAKA,MAArD;AAA2D;AAE3D,YAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgCA,SAASC,eAAeE,UAAf,CAA0BH,MAA1B,CAAT;AAChC,eAAOA,OAAOoB,SAAP,CAAiB,KAAKJ,OAAtB,CAAP;AACD,KALD;AAOAlB,WAAAiB,SAAA,CAAAM,QAAA,GAAA,UAASX,IAAT,EAAuBY,GAAvB,EAAyC;AAAlB,YAAAA,QAAA,KAAA,CAAA,EAAA;AAAAA,kBAAM,KAAKN,OAAX;AAAkB;AACvC,YAAIV,QAAuBI,KAAKH,KAAL,CAAW,KAAX,CAA3B;AACA,YAAIgB,WAA0B,EAA9B;AACA,YAAID,IAAIE,cAAJ,CAAmBlB,MAAM,CAAN,CAAnB,CAAJ,EAAkC;AAChC,iBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC;AAAuCe,yBAASf,IAAI,CAAb,IAAkBF,MAAME,CAAN,CAAlB;AAAvC,aACA,IAAIc,IAAIhB,MAAM,CAAN,CAAJ,aAAyBmB,MAA7B,EACE,OAAO,KAAKJ,QAAL,CAAcE,SAASG,IAAT,CAAc,GAAd,CAAd,EAAkCJ,IAAIhB,MAAM,CAAN,CAAJ,CAAlC,CAAP;AACF,mBAAO,IAAP;AACD;AACD,eAAO,KAAP;AACD,KAVD;AAYAR,WAAAiB,SAAA,CAAAY,GAAA,GAAA,UAAIjB,IAAJ,EAAkBY,GAAlB,EAAoC;AAAlB,YAAAA,QAAA,KAAA,CAAA,EAAA;AAAAA,kBAAM,KAAKN,OAAX;AAAkB;AAClC,YAAI,KAAKK,QAAL,CAAcX,IAAd,EAAoBY,GAApB,CAAJ,EAA8B;AAC5B,gBAAIhB,QAAQI,KAAKH,KAAL,CAAW,KAAX,CAAZ;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAA1B,EAAkCD,GAAlC,EAAuC;AACrCc,sBAAMA,IAAIhB,MAAME,CAAN,CAAJ,CAAN;AACD;AACD,mBAAOc,GAAP;AACD,SAND,MAMO;AACLM,oBAAQC,GAAR,CACE,oDAAiDnB,IAAjD,GAAqD,oBADvD;AAGA,mBAAO,IAAP;AACD;AACF,KAbD;AAeAZ,WAAAiB,SAAA,CAAAe,GAAA,GAAA,UAAIpB,IAAJ,EAAkBqB,GAAlB,EAA0B;AACxB,YAAIzB,QAAQI,KAAKH,KAAL,CAAW,GAAX,CAAZ;AACA,YAAIe,MAAM,KAAKN,OAAf;AAEA,aAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAAN,GAAe,CAAnC,EAAsCD,GAAtC,EAA2C;AACzC,gBAAI,CAACc,IAAIhB,MAAME,CAAN,CAAJ,CAAD,IAAkB,EAAEc,IAAIhB,MAAME,CAAN,CAAJ,aAAyBiB,MAA3B,CAAtB,EACEH,IAAIhB,MAAME,CAAN,CAAJ,IAAgB,EAAhB;AACFc,kBAAMA,IAAIhB,MAAME,CAAN,CAAJ,CAAN;AACD;AAED,YAAIwB,MAAM,kBAAkBtB,IAAlB,GAAyB,SAAnC;AACAuB,aAAKD,GAAL;AACD,KAZD;AAcAlC,WAAAiB,SAAA,CAAAmB,MAAA,GAAA,UAAOxB,IAAP,EAAmB;AACjB,YAAIJ,QAAQI,KAAKH,KAAL,CAAW,GAAX,CAAZ;AACA,YAAIe,MAAM,KAAKN,OAAf;AAEA,aAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIF,MAAMG,MAAN,GAAe,CAAnC,EAAsCD,GAAtC,EAA2C;AACzC,gBAAI,CAACc,IAAIhB,MAAME,CAAN,CAAJ,CAAD,IAAkB,EAAEc,IAAIhB,MAAME,CAAN,CAAJ,aAAyBiB,MAA3B,CAAtB,EACEH,IAAIhB,MAAME,CAAN,CAAJ,IAAgB,EAAhB;AACFc,kBAAMA,IAAIhB,MAAME,CAAN,CAAJ,CAAN;AACD;AAED,YAAIwB,MAAM,0BAA0BtB,IAA1B,GAAiC,GAA3C;AACAuB,aAAKD,GAAL;AACD,KAZD;AAcAlC,WAAAiB,SAAA,CAAAoB,WAAA,GAAA,UAAYzB,IAAZ,EAA0BqB,GAA1B,EAAkC;AAChC,YAAI,CAAC,KAAKV,QAAL,CAAcX,IAAd,CAAL,EAA0B,KAAKoB,GAAL,CAASpB,IAAT,EAAeqB,GAAf;AAC3B,KAFD;AAIAjC,WAAAiB,SAAA,CAAAqB,MAAA,GAAA,UAAOd,GAAP,EAA2B;AAA3B,YAAAe,QAAA,IAAA;AACE,YAAIf,eAAexB,MAAnB,EAA2B;AACzBwB,gBAAIgB,IAAJ,GAAWC,OAAX,CAAmB,UAACC,CAAD,EAAU;AAC3B,oBAAI,CAACH,MAAKhB,QAAL,CAAcmB,CAAd,CAAL,EAAuBH,MAAKP,GAAL,CAASU,CAAT,EAAYlB,IAAIK,GAAJ,CAAQa,CAAR,CAAZ;AACxB,aAFD;AAGD,SAJD,MAIO;AACL,iBAAKF,IAAL,CAAUhB,GAAV,EAAeiB,OAAf,CAAuB,UAACC,CAAD,EAAU;AAC/B,oBAAI,CAACH,MAAKhB,QAAL,CAAcmB,CAAd,CAAL,EAAuBH,MAAKP,GAAL,CAASU,CAAT,EAAYH,MAAKV,GAAL,CAASa,CAAT,EAAYlB,GAAZ,CAAZ;AACxB,aAFD;AAGD;AACF,KAVD;AAYAxB,WAAAiB,SAAA,CAAA0B,KAAA,GAAA,UAAMnB,GAAN,EAA0B;AAA1B,YAAAe,QAAA,IAAA;AACE,YAAIf,eAAexB,MAAnB,EAA2B;AACzBwB,gBAAIgB,IAAJ,GAAWC,OAAX,CAAmB,UAACC,CAAD,EAAU;AAC3BH,sBAAKP,GAAL,CAASU,CAAT,EAAYlB,IAAIK,GAAJ,CAAQa,CAAR,CAAZ;AACD,aAFD;AAGD,SAJD,MAIO;AACL,iBAAKF,IAAL,CAAUhB,GAAV,EAAeiB,OAAf,CAAuB,UAACC,CAAD,EAAU;AAC/BH,sBAAKP,GAAL,CAASU,CAAT,EAAYH,MAAKV,GAAL,CAASa,CAAT,EAAYlB,GAAZ,CAAZ;AACD,aAFD;AAGD;AACF,KAVD;AAYAxB,WAAAiB,SAAA,CAAAuB,IAAA,GAAA,UAAKhB,GAAL,EAA+B;AAA/B,YAAAe,QAAA,IAAA;AAAK,YAAAf,QAAA,KAAA,CAAA,EAAA;AAAAA,kBAAc,KAAKN,OAAnB;AAA0B;AAC7B,YAAI0B,OAAOjB,OAAOiB,IAAP,CAAYpB,GAAZ,CAAX;AACA,YAAIqB,MAAgB,EAApB;AACAD,aAAKH,OAAL,CAAa,UAAAC,CAAA,EAAC;AACZ,gBAAIlB,IAAIkB,CAAJ,aAAkBf,MAAtB,EAA8B;AAC5BY,sBAAKC,IAAL,CAAUhB,IAAIkB,CAAJ,CAAV,EAAkBD,OAAlB,CAA0B,UAAAK,CAAA,EAAC;AACzBD,wBAAIE,IAAJ,CAASL,IAAI,GAAJ,GAAUI,CAAnB;AACD,iBAFD;AAGD,aAJD,MAIOD,IAAIE,IAAJ,CAASL,CAAT;AACR,SAND;AAOA,eAAOG,GAAP;AACD,KAXD;AAYF,WAAA7C,MAAA;AAhJA,CAAA,EAAA;AA0LSL,QAAAK,MAAA,GAAAA,MAAA;AAxCT,IAAOG,cAAP;AAAA,CAAA,UAAOA,cAAP,EAAqB;AAMnB,QAAA6C,gBAAA,aAAA,YAAA;AAAA,iBAAAA,aAAA,GAAA;AACE,iBAAA1B,SAAA,GAAY2B,KAAK3B,SAAjB;AACA,iBAAAH,KAAA,GAAQ8B,KAAK9B,KAAb;AACD;AAAD,eAAA6B,aAAA;AAHA,KAAA,EAAA;AAKA,QAAAE,gBAAA,aAAA,YAAA;AAAA,iBAAAA,aAAA,GAAA;AACE,iBAAA5B,SAAA,GAAYzB,KAAKsD,QAAjB;AACA,iBAAAhC,KAAA,GAAQtB,KAAKuD,QAAb;AACD;AAAD,eAAAF,aAAA;AAHA,KAAA,EAAA;AAKW/C,mBAAAC,IAAA,GAAsB,IAAI4C,aAAJ,EAAtB;AACA7C,mBAAAkD,IAAA,GAAsB,IAAIH,aAAJ,EAAtB;AAEX,aAAgB7C,UAAhB,CAA2BiD,IAA3B,EAAuC;AACrCA,eAAOA,KAAKC,WAAL,EAAP;AACA,YAAID,QAAQ,MAAZ,EAAoB,OAAO,KAAKlD,IAAZ,CAApB,KACK,IAAIkD,QAAQ,MAAZ,EAAoB,OAAO,KAAKD,IAAZ,CAApB,KACA,OAAO,IAAP;AACN;AALelD,mBAAAE,UAAA,GAAUA,UAAV;AAMjB,CAzBD,EAAOF,mBAAAA,iBAAc,EAAd,CAAP;AAwCiBR,QAAAQ,cAAA,GAAAA,cAAA;AAbjB,IAAIqD,SAAiB,IAAIxD,MAAJ,CAAW,YAAX,EAAyBG,eAAekD,IAAxC,CAArB;AAaiC1D,QAAA6D,MAAA,GAAAA,MAAA;AAZjCC;AAEA,SAASA,UAAT,GAAmB;AACjBD,WAAOxC,IAAP;AACAwC,WAAOnC,IAAP;AACD;AAEDqC,OAAOvD,cAAP,GAAwBA,cAAxB;AACAuD,OAAO1D,MAAP,GAAgBA,MAAhB;AACA0D,OAAOF,MAAP,GAAgBA,MAAhB;AAEA7D,QAAA,SAAA,IAAe6D,MAAf","file":"Config.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar YAML = require(\"js-yaml\");\nvar fs = require(\"fs\");\nvar Config = /** @class */ (function () {\n    function Config(file, parser) {\n        if (parser === void 0) { parser = FileFormatters.Json; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        this.parser = parser;\n        this.file = file;\n        if (!fs.existsSync(file)) {\n            file = file.replace(\"\\\\\", \"/\");\n            var parts = file.split(\"/\");\n            for (var i = 1; i < parts.length; i++) {\n                var path = \"\";\n                for (var c = 0; c < i; c++)\n                    path += parts[c] + \"/\";\n                if (!fs.existsSync(path))\n                    fs.mkdirSync(path);\n            }\n            fs.writeFileSync(file, \"\");\n        }\n        this.load();\n    }\n    Config.prototype.load = function (file, parser) {\n        if (file === void 0) { file = this.file; }\n        if (parser === void 0) { parser = this.parser; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        this.content = parser.parse(fs.readFileSync(file, \"utf8\"));\n        if (this.content == null)\n            this.content = {};\n    };\n    Config.prototype.save = function (file, parser) {\n        if (file === void 0) { file = this.file; }\n        if (parser === void 0) { parser = this.parser; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        fs.writeFileSync(file, parser.stringify(this.content));\n    };\n    Config.prototype.stringify = function (parser) {\n        if (parser === void 0) { parser = this.parser; }\n        if (typeof parser === \"string\")\n            parser = FileFormatters.fromString(parser);\n        return parser.stringify(this.content);\n    };\n    Config.prototype.contains = function (path, obj) {\n        if (obj === void 0) { obj = this.content; }\n        var parts = path.split(/\\./g);\n        var subparts = [];\n        if (obj.hasOwnProperty(parts[0])) {\n            for (var i = 1; i < parts.length; i++)\n                subparts[i - 1] = parts[i];\n            if (obj[parts[0]] instanceof Object)\n                return this.contains(subparts.join(\".\"), obj[parts[0]]);\n            return true;\n        }\n        return false;\n    };\n    Config.prototype.get = function (path, obj) {\n        if (obj === void 0) { obj = this.content; }\n        if (this.contains(path, obj)) {\n            var parts = path.split(/\\./g);\n            for (var i = 0; i < parts.length; i++) {\n                obj = obj[parts[i]];\n            }\n            return obj;\n        }\n        else {\n            console.log(\"Ooups... Trying to get empty path from Yaml: \\\"\" + path + \"\\\" Returning null!\");\n            return null;\n        }\n    };\n    Config.prototype.set = function (path, val) {\n        var parts = path.split(\".\");\n        var obj = this.content;\n        for (var i = 0; i < parts.length - 1; i++) {\n            if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object))\n                obj[parts[i]] = {};\n            obj = obj[parts[i]];\n        }\n        var cmd = \"this.content.\" + path + \" = val;\";\n        eval(cmd);\n    };\n    Config.prototype.remove = function (path) {\n        var parts = path.split(\".\");\n        var obj = this.content;\n        for (var i = 0; i < parts.length - 1; i++) {\n            if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object))\n                obj[parts[i]] = {};\n            obj = obj[parts[i]];\n        }\n        var cmd = 'delete this.content.\"' + path + \";\";\n        eval(cmd);\n    };\n    Config.prototype.setStandart = function (path, val) {\n        if (!this.contains(path))\n            this.set(path, val);\n    };\n    Config.prototype.concat = function (obj) {\n        var _this = this;\n        if (obj instanceof Config) {\n            obj.list().forEach(function (e) {\n                if (!_this.contains(e))\n                    _this.set(e, obj.get(e));\n            });\n        }\n        else {\n            this.list(obj).forEach(function (e) {\n                if (!_this.contains(e))\n                    _this.set(e, _this.get(e, obj));\n            });\n        }\n    };\n    Config.prototype.apply = function (obj) {\n        var _this = this;\n        if (obj instanceof Config) {\n            obj.list().forEach(function (e) {\n                _this.set(e, obj.get(e));\n            });\n        }\n        else {\n            this.list(obj).forEach(function (e) {\n                _this.set(e, _this.get(e, obj));\n            });\n        }\n    };\n    Config.prototype.list = function (obj) {\n        var _this = this;\n        if (obj === void 0) { obj = this.content; }\n        var keys = Object.keys(obj);\n        var ret = [];\n        keys.forEach(function (e) {\n            if (obj[e] instanceof Object) {\n                _this.list(obj[e]).forEach(function (v) {\n                    ret.push(e + \".\" + v);\n                });\n            }\n            else\n                ret.push(e);\n        });\n        return ret;\n    };\n    return Config;\n}());\nexports.Config = Config;\nvar FileFormatters;\n(function (FileFormatters) {\n    var JSONFormatter = /** @class */ (function () {\n        function JSONFormatter() {\n            this.stringify = JSON.stringify;\n            this.parse = JSON.parse;\n        }\n        return JSONFormatter;\n    }());\n    var YAMLFormatter = /** @class */ (function () {\n        function YAMLFormatter() {\n            this.stringify = YAML.safeDump;\n            this.parse = YAML.safeLoad;\n        }\n        return YAMLFormatter;\n    }());\n    FileFormatters.Json = new JSONFormatter();\n    FileFormatters.Yaml = new YAMLFormatter();\n    function fromString(from) {\n        from = from.toLowerCase();\n        if (from == \"json\")\n            return this.Json;\n        else if (from == \"yaml\")\n            return this.Yaml;\n        else\n            return null;\n    }\n    FileFormatters.fromString = fromString;\n})(FileFormatters || (FileFormatters = {}));\nexports.FileFormatters = FileFormatters;\nvar config = new Config(\"config.yml\", FileFormatters.Yaml);\nexports.config = config;\nloadConfig();\nfunction loadConfig() {\n    config.load();\n    config.save();\n}\nglobal.FileFormatters = FileFormatters;\nglobal.Config = Config;\nglobal.config = config;\nexports[\"default\"] = config;\n","import * as YAML from \"js-yaml\";\r\nimport * as fs from \"fs\";\r\n\r\ndeclare let global: any;\r\n\r\nclass Config {\r\n  file: string;\r\n  content: any;\r\n  parser: FileFormatters.FileFormatter;\r\n\r\n  constructor(\r\n    file: string,\r\n    parser: string | FileFormatters.FileFormatter = FileFormatters.Json\r\n  ) {\r\n    if (typeof parser === \"string\") parser = FileFormatters.fromString(parser);\r\n    this.parser = parser;\r\n    this.file = file;\r\n    if (!fs.existsSync(file)) {\r\n      file = file.replace(\"\\\\\", \"/\");\r\n      let parts = file.split(\"/\");\r\n      for (let i = 1; i < parts.length; i++) {\r\n        let path = \"\";\r\n        for (let c = 0; c < i; c++) path += parts[c] + \"/\";\r\n        if (!fs.existsSync(path)) fs.mkdirSync(path);\r\n      }\r\n      fs.writeFileSync(file, \"\");\r\n    }\r\n    this.load();\r\n  }\r\n\r\n  load(\r\n    file = this.file,\r\n    parser: string | FileFormatters.FileFormatter = this.parser\r\n  ) {\r\n    if (typeof parser === \"string\") parser = FileFormatters.fromString(parser);\r\n    this.content = parser.parse(fs.readFileSync(file, \"utf8\"));\r\n    if (this.content == null) this.content = {};\r\n  }\r\n\r\n  save(\r\n    file = this.file,\r\n    parser: string | FileFormatters.FileFormatter = this.parser\r\n  ) {\r\n    if (typeof parser === \"string\") parser = FileFormatters.fromString(parser);\r\n    fs.writeFileSync(file, parser.stringify(this.content));\r\n  }\r\n\r\n  stringify(\r\n    parser: string | FileFormatters.FileFormatter = this.parser\r\n  ): string {\r\n    if (typeof parser === \"string\") parser = FileFormatters.fromString(parser);\r\n    return parser.stringify(this.content);\r\n  }\r\n\r\n  contains(path: string, obj = this.content) {\r\n    let parts: Array<string> = path.split(/\\./g);\r\n    let subparts: Array<string> = [];\r\n    if (obj.hasOwnProperty(parts[0])) {\r\n      for (let i = 1; i < parts.length; i++) subparts[i - 1] = parts[i];\r\n      if (obj[parts[0]] instanceof Object)\r\n        return this.contains(subparts.join(\".\"), obj[parts[0]]);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  get(path: string, obj = this.content) {\r\n    if (this.contains(path, obj)) {\r\n      let parts = path.split(/\\./g);\r\n      for (let i = 0; i < parts.length; i++) {\r\n        obj = obj[parts[i]];\r\n      }\r\n      return obj;\r\n    } else {\r\n      console.log(\r\n        `Ooups... Trying to get empty path from Yaml: \"${path}\" Returning null!`\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n\r\n  set(path: string, val: any) {\r\n    let parts = path.split(\".\");\r\n    let obj = this.content;\r\n\r\n    for (let i = 0; i < parts.length - 1; i++) {\r\n      if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object))\r\n        obj[parts[i]] = {};\r\n      obj = obj[parts[i]];\r\n    }\r\n\r\n    let cmd = \"this.content.\" + path + \" = val;\";\r\n    eval(cmd);\r\n  }\r\n\r\n  remove(path: string) {\r\n    let parts = path.split(\".\");\r\n    let obj = this.content;\r\n\r\n    for (let i = 0; i < parts.length - 1; i++) {\r\n      if (!obj[parts[i]] || !(obj[parts[i]] instanceof Object))\r\n        obj[parts[i]] = {};\r\n      obj = obj[parts[i]];\r\n    }\r\n\r\n    let cmd = 'delete this.content.\"' + path + \";\";\r\n    eval(cmd);\r\n  }\r\n\r\n  setStandart(path: string, val: any) {\r\n    if (!this.contains(path)) this.set(path, val);\r\n  }\r\n\r\n  concat(obj: object | Config) {\r\n    if (obj instanceof Config) {\r\n      obj.list().forEach((e: string) => {\r\n        if (!this.contains(e)) this.set(e, obj.get(e));\r\n      });\r\n    } else {\r\n      this.list(obj).forEach((e: string) => {\r\n        if (!this.contains(e)) this.set(e, this.get(e, obj));\r\n      });\r\n    }\r\n  }\r\n\r\n  apply(obj: object | Config) {\r\n    if (obj instanceof Config) {\r\n      obj.list().forEach((e: string) => {\r\n        this.set(e, obj.get(e));\r\n      });\r\n    } else {\r\n      this.list(obj).forEach((e: string) => {\r\n        this.set(e, this.get(e, obj));\r\n      });\r\n    }\r\n  }\r\n\r\n  list(obj: Object = this.content): string[] {\r\n    let keys = Object.keys(obj);\r\n    let ret: string[] = [];\r\n    keys.forEach(e => {\r\n      if (obj[e] instanceof Object) {\r\n        this.list(obj[e]).forEach(v => {\r\n          ret.push(e + \".\" + v);\r\n        });\r\n      } else ret.push(e);\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n\r\nmodule FileFormatters {\r\n  export interface FileFormatter {\r\n    stringify(object: any): string;\r\n    parse(string: string): any;\r\n  }\r\n\r\n  class JSONFormatter implements FileFormatter {\r\n    stringify = JSON.stringify;\r\n    parse = JSON.parse;\r\n  }\r\n\r\n  class YAMLFormatter implements FileFormatter {\r\n    stringify = YAML.safeDump;\r\n    parse = YAML.safeLoad;\r\n  }\r\n\r\n  export let Json: FileFormatter = new JSONFormatter();\r\n  export let Yaml: FileFormatter = new YAMLFormatter();\r\n\r\n  export function fromString(from: string): FileFormatter {\r\n    from = from.toLowerCase();\r\n    if (from == \"json\") return this.Json;\r\n    else if (from == \"yaml\") return this.Yaml;\r\n    else return null;\r\n  }\r\n}\r\n\r\nlet config: Config = new Config(\"config.yml\", FileFormatters.Yaml);\r\nloadConfig();\r\n\r\nfunction loadConfig() {\r\n  config.load();\r\n  config.save();\r\n}\r\n\r\nglobal.FileFormatters = FileFormatters;\r\nglobal.Config = Config;\r\nglobal.config = config;\r\n\r\nexport default config;\r\nexport { Config, FileFormatters, config };\r\n"]}