"use strict";exports.__esModule=!0;var working_dir,savesfile,saves,ignorefile,ignore,gitignorefile,gitignore,fs=require("fs"),qs=require("querystring"),os=require("os"),path=require("path"),lineseperator=os.EOL,savesfilename=".mcscriptStudioCode",ignorefilename=".mcscriptStudioCodeIgnore",gitignorefilename=".gitignore",ServerSideApplication=function(){function e(e){savesfile=(working_dir=e)+"/"+savesfilename,ignorefile=working_dir+"/"+ignorefilename,gitignorefile=working_dir+"/"+gitignorefilename,loadsaves(),loadIgnore(),fs.watchFile(ignorefile,loadIgnore)}return e.prototype.execRequest=function(i,r){try{if("POST"==i.method){var s="";i.on("data",function(e){1e6<(s+=e).length&&i.connection.destroy()}),i.on("end",function(){var e,i=qs.parse(s);switch(r.writeHead(200,{"Content-Type":"application/json"}),i.action){case"get_files":r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action,working_dir:path.basename(working_dir),files:listFiles(working_dir)}),"utf-8");break;case"get_file":if(null==(e=i.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(""+e)||!fs.lstatSync(""+e).isFile())return r.writeHead(200,{"Content-Type":"application/json"}),void r.end(JSON.stringify({id:i.id,action:i.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");var n=fs.readFileSync(""+e).toString(),t=fs.lstatSync(""+e);r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action,file:{name:rawName(e),type:extension(e),path:e,fullpath:working_dir+"/"+e,content:n,size:t.size}}),"utf-8");break;case"save_file":if(null==(e=i.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(""+e)||!fs.lstatSync(""+e).isFile())return r.writeHead(200,{"Content-Type":"application/json"}),void r.end(JSON.stringify({id:i.id,action:i.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");fs.writeFileSync(e,i.content),r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action,file:{name:rawName(e),type:extension(e),path:e,content:n,size:fs.lstatSync(""+e).size}}),"utf-8");break;case"send_update_change_file":if(null==(e=i.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(working_dir+"/"+e)||!fs.lstatSync(working_dir+"/"+e).isFile())return r.writeHead(200,{"Content-Type":"application/json"}),void r.end(JSON.stringify({id:i.id,action:i.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");if(null==(n=i.content))return r.writeHead(200,{"Content-Type":"application/json"}),void r.end(JSON.stringify({id:i.id,action:i.action,error:{code:"empty_content",message:"Content is empty"}}),"utf-8");saves.backup.openedFiles[e]=n,savesaves(),r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action,file:{name:"unsaved:"+e.substring(e.lastIndexOf("/")+1),type:e.substring(e.lastIndexOf(".")+1),path:"unsaved:"+e,fullpath:"unsaved:"+working_dir+"/"+e,content:n}}),"utf-8");break;case"send_update_close_file":if(e=i.file.replace(/\\/g,"/").replace(/\.\./g,"."),!saves.backup.openedFiles[e])return r.writeHead(200,{"Content-Type":"application/json"}),void r.end(JSON.stringify({id:i.id,action:i.action,error:{code:"file_not_opened",message:"This file is not opened"}}),"utf-8");delete saves.backup.openedFiles[e],savesaves(),r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action}),"utf-8");break;case"list_opened_files":r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action,files:Object.keys(saves.backup.openedFiles)}),"utf-8");break;case"get_opened_file":if(null==(e=i.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(working_dir+"/"+e)||!fs.lstatSync(working_dir+"/"+e).isFile())return r.writeHead(200,{"Content-Type":"application/json"}),void r.end(JSON.stringify({id:i.id,action:i.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action,file:e,content:saves.backup.openedFiles[e]}),"utf-8");break;default:r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({id:i.id,action:i.action,error:{code:"wrong_action",message:"This action does not exist"}}),"utf-8")}})}else r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({error:{code:"no_post",message:"Needing post content"}}),"utf-8")}catch(e){console.error(e);var n=new Date,t=n.getDate()+"."+(n.getMonth()+1)+"."+n.getFullYear()+" @ "+n.getHours()+":"+n.getMinutes()+":"+n.getSeconds(),a=n.getDate()+"."+(n.getMonth()+1)+"."+n.getFullYear()+"."+n.getHours()+"."+n.getMinutes()+"."+n.getSeconds(),o=__dirname+"/../crashes/"+a+".log";fs.writeFileSync(o,"created at "+t+"\n\n"+e+"\n"+e.stack),r.writeHead(200,{"Content-Type":"application/json"}),r.end(JSON.stringify({exception:{exception:e,message:"Exception occured while executing request: "+e+". Please repost this bug <a href=https://github.com/miniminelp/mcscriptStudioCode/issues>here</a>. Full log here: "+o}}),"utf-8")}},e}();function listFiles(e){if(fs.lstatSync(e).isDirectory()){for(var i={},n=fs.readdirSync(e),t=0;t<n.length;t++)i[n[t]]=listFiles(e+"/"+n[t]);return i=removeIgnoredFromList(i)}return e}function removeIgnoredFromList(n){for(var t=ignore.concat(gitignore),e=function(e){var i=t[e];i=i.replace(/(\r|\n)|(^( |\t)*)|(( |\t)*$)|/g,""),/^\/.*\/$/.test(i)?i=i.replace(/^\//,"").replace(/\/$/,""):(i="^\\/"+i.replace(/\\/,"\\\\").replace(/\./,"\\.").replace(/\[/,"\\[").replace(/\]/,"\\]").replace(/\(/,"\\]").replace(/\)/,"\\]").replace(/\{/,"\\]").replace(/\}/,"\\]").replace(/\*/,".*").replace(/\//,"\\/").replace(/\^/,"\\^").replace(/\$/,"\\$").replace(/\?/,"\\?").replace(/\+/,"\\+").replace(/\=/,"\\=").replace(/\|/,"\\|").replace(/\,/,"\\,").replace(/\=/,"\\=").replace(/\=/,"\\="),i+="$");var r=new RegExp(i),s=function(e,i){for(var n in i){var t=e+"/"+n;r.test(t)?delete i[n]:i[t]instanceof Object&&(i[t]=s(t,i[t]))}return i};n=s("",n)},i=0;i<t.length;i++)e(i);return n}function savesaves(){fs.writeFileSync(savesfile,JSON.stringify(saves))}function loadsaves(){saves=fs.existsSync(savesfile)?JSON.parse(fs.readFileSync(savesfile).toString()):{backup:{openedFiles:{}}},savesaves()}function saveIgnore(){fs.writeFileSync(ignorefile,ignore.join(lineseperator))}function loadIgnore(){ignore=fs.existsSync(ignorefile)?fs.readFileSync(ignorefile).toString().replace(/\r/g,"").split("\n"):[ignorefilename,savesfilename],saveIgnore(),gitignore=fs.existsSync(gitignorefile)?fs.readFileSync(gitignorefile).toString().replace(/\r/g,"").split("\n"):[]}function rawName(e){return(e=e.replace(/\\/g,"/")).substring(e.lastIndexOf("/")+1)}function extension(e){return e.substring(e.lastIndexOf(".")+1)}exports.default=ServerSideApplication;