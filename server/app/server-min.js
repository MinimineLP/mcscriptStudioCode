"use strict";exports.__esModule=!0;var working_dir,savesfile,saves,ignorefile,ignore,gitignorefile,gitignore,fs=require("fs"),qs=require("querystring"),os=require("os"),path=require("path"),lineseperator=os.EOL,savesfilename=".mcscriptStudioCode",ignorefilename=".mcscriptStudioCodeIgnore",gitignorefilename=".gitignore",ServerSideApplication=function(){function e(e){savesfile=(working_dir=e)+"/"+savesfilename,ignorefile=working_dir+"/"+ignorefilename,gitignorefile=working_dir+"/"+gitignorefilename,loadsaves(),loadIgnore(),fs.watchFile(ignorefile,loadIgnore)}return e.prototype.execRequest=function(e,i){try{if("POST"==e.method){var n="";e.on("data",function(i){(n+=i).length>1e6&&e.connection.destroy()}),e.on("end",function(){var e,t=qs.parse(n);switch(i.writeHead(200,{"Content-Type":"application/json"}),t.action){case"get_files":i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action,working_dir:path.basename(working_dir),files:listFiles(working_dir)}),"utf-8");break;case"get_file":if(null==(e=t.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(""+e)||!fs.lstatSync(""+e).isFile())return i.writeHead(200,{"Content-Type":"application/json"}),void i.end(JSON.stringify({id:t.id,action:t.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");var r=fs.readFileSync(""+e).toString(),s=fs.lstatSync(""+e);i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action,file:{name:rawName(e),type:extension(e),path:e,fullpath:working_dir+"/"+e,content:r,size:s.size}}),"utf-8");break;case"save_file":if(null==(e=t.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(""+e)||!fs.lstatSync(""+e).isFile())return i.writeHead(200,{"Content-Type":"application/json"}),void i.end(JSON.stringify({id:t.id,action:t.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");fs.writeFileSync(e,t.content),i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action,file:{name:rawName(e),type:extension(e),path:e,content:r,size:fs.lstatSync(""+e).size}}),"utf-8");break;case"send_update_change_file":if(null==(e=t.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(working_dir+"/"+e)||!fs.lstatSync(working_dir+"/"+e).isFile())return i.writeHead(200,{"Content-Type":"application/json"}),void i.end(JSON.stringify({id:t.id,action:t.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");if(null==(r=t.content))return i.writeHead(200,{"Content-Type":"application/json"}),void i.end(JSON.stringify({id:t.id,action:t.action,error:{code:"empty_content",message:"Content is empty"}}),"utf-8");saves.backup.openedFiles[e]=r,savesaves(),i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action,file:{name:"unsaved:"+e.substring(e.lastIndexOf("/")+1),type:e.substring(e.lastIndexOf(".")+1),path:"unsaved:"+e,fullpath:"unsaved:"+working_dir+"/"+e,content:r}}),"utf-8");break;case"send_update_close_file":if(e=t.file.replace(/\\/g,"/").replace(/\.\./g,"."),!saves.backup.openedFiles[e])return i.writeHead(200,{"Content-Type":"application/json"}),void i.end(JSON.stringify({id:t.id,action:t.action,error:{code:"file_not_opened",message:"This file is not opened"}}),"utf-8");delete saves.backup.openedFiles[e],savesaves(),i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action}),"utf-8");break;case"list_opened_files":i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action,files:Object.keys(saves.backup.openedFiles)}),"utf-8");break;case"get_opened_file":if(null==(e=t.file.replace(/\\/g,"/").replace(/\.\./g,"."))||!fs.existsSync(working_dir+"/"+e)||!fs.lstatSync(working_dir+"/"+e).isFile())return i.writeHead(200,{"Content-Type":"application/json"}),void i.end(JSON.stringify({id:t.id,action:t.action,error:{code:"wrong_file",message:"This file does not exist"}}),"utf-8");i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action,file:e,content:saves.backup.openedFiles[e]}),"utf-8");break;default:i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({id:t.id,action:t.action,error:{code:"wrong_action",message:"This action does not exist"}}),"utf-8")}})}else i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({error:{code:"no_post",message:"Needing post content"}}),"utf-8")}catch(e){console.error(e);var t=new Date,r=t.getDate()+"."+(t.getMonth()+1)+"."+t.getFullYear()+" @ "+t.getHours()+":"+t.getMinutes()+":"+t.getSeconds(),s=t.getDate()+"."+(t.getMonth()+1)+"."+t.getFullYear()+"."+t.getHours()+"."+t.getMinutes()+"."+t.getSeconds(),a=__dirname+"/../crashes/"+s+".log";fs.writeFileSync(a,"created at "+r+"\n\n"+e+"\n"+e.stack),i.writeHead(200,{"Content-Type":"application/json"}),i.end(JSON.stringify({exception:{exception:e,message:"Exception occured while executing request: "+e+". Please repost this bug <a href=https://github.com/miniminelp/mcscriptStudioCode/issues>here</a>. Full log here: "+a}}),"utf-8")}},e}();function listFiles(e){if(fs.lstatSync(e).isDirectory()){for(var i={},n=fs.readdirSync(e),t=0;t<n.length;t++)i[n[t]]=listFiles(e+"/"+n[t]);return i=removeIgnoredFromList(i)}return e}function removeIgnoredFromList(e){for(var i=ignore.concat(gitignore),n=function(n){var t=i[n];t=t.replace(/(\r|\n)|(^( |\t)*)|(( |\t)*$)|/g,""),/^\/.*\/$/.test(t)?t=t.replace(/^\//,"").replace(/\/$/,""):(t="^\\/"+t.replace(/\\/,"\\\\").replace(/\./,"\\.").replace(/\[/,"\\[").replace(/\]/,"\\]").replace(/\(/,"\\]").replace(/\)/,"\\]").replace(/\{/,"\\]").replace(/\}/,"\\]").replace(/\*/,".*").replace(/\//,"\\/").replace(/\^/,"\\^").replace(/\$/,"\\$").replace(/\?/,"\\?").replace(/\+/,"\\+").replace(/\=/,"\\=").replace(/\|/,"\\|").replace(/\,/,"\\,").replace(/\=/,"\\=").replace(/\=/,"\\="),t+="$");var r=new RegExp(t),s=function(e,i){for(var n in i){var t=e+"/"+n;r.test(t)?delete i[n]:i[t]instanceof Object&&(i[t]=s(t,i[t]))}return i};e=s("",e)},t=0;t<i.length;t++)n(t);return e}function savesaves(){fs.writeFileSync(savesfile,JSON.stringify(saves))}function loadsaves(){saves=fs.existsSync(savesfile)?JSON.parse(fs.readFileSync(savesfile).toString()):{backup:{openedFiles:{}}},savesaves()}function saveIgnore(){fs.writeFileSync(ignorefile,ignore.join(lineseperator))}function loadIgnore(){ignore=fs.existsSync(ignorefile)?fs.readFileSync(ignorefile).toString().replace(/\r/g,"").split("\n"):[ignorefilename,savesfilename],saveIgnore(),gitignore=fs.existsSync(gitignorefile)?fs.readFileSync(gitignorefile).toString().replace(/\r/g,"").split("\n"):[]}function rawName(e){return(e=e.replace(/\\/g,"/")).substring(e.lastIndexOf("/")+1)}function extension(e){return e.substring(e.lastIndexOf(".")+1)}exports.default=ServerSideApplication;