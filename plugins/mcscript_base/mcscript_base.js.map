{"version":3,"sources":["mcscript_base.js","mcscript_base.ts"],"names":["__extends","d","b","extendStatics","setPrototypeOf","Object","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","config","pluginmanager_1","require","Config_1","mcscript","fs","Shortcutbar","_super","apply","arguments","setup","start","Config","__dirname","FileFormatters","Yaml","loadConfig","watch","working_dir","arg","_i","length","get","endsWith","compile","api","getAPI","addButton","stop","reload","Plugin","load","setStandart","save","exports"],"mappings":"AAAA,aACA,IAAIA,UAAyC,WAAzCA,IAAAA,EAAa,SAAQC,EAAAC,GAG8D,OAF/EC,EAAAA,OAAgBC,gBAChBD,CAAAA,UAAgBE,cAAOD,OAClB,SAAEE,EAAWJ,GAAbD,EAAAK,UAA6BC,IAA2BN,SAAEK,EAAFJ,GAAA,IAAA,IAAAM,KAAAN,EAAAA,EAAAO,eAAAD,KAAAP,EAAAO,GAAAN,EAAAM,MACzCP,EAAAC,IAAmB,OAAA,SAAIA,EAAEO,GAAiC,SAF9EC,IAAAC,KAAAC,YAAAX,EAEsBE,EAAAF,EAAAC,GACtBD,EAAAY,UAAOV,OAAAA,EAAPE,OAAAS,OAAAZ,IAAAQ,EAAAG,UAAAX,EAAAW,UAAA,IAAAH,IALqC,GAQrCP,QAAAA,YAAAA,ECTR,IAQIY,OARJC,gBAAAC,QAAA,qCACAC,SAAAD,QAAA,8BAIAE,SAAAF,QAAA,YACAG,GAAAH,QAAA,MAIAI,YAAA,SAAAC,GAAA,SAAAD,IATAH,OAAA,OAAAD,GAAAK,EAAAC,MAAAZ,KAAAa,YAAAb,KAyCA,OAhCyCX,UAAAqB,EAAAC,GAEvCD,EAAAR,UAAAY,MAAA,aAGAJ,EAAAR,UAAAa,MAAA,WACEX,OAAS,IAAIG,SAAAS,OAAUC,UAAS,cAAeV,SAAAW,eAAeC,MAC9DC,aACA,IAAI7B,GAAa,EACjBkB,GAAGY,MAAMC,YAAa,WAJxBZ,IAIiC,IAAAa,EAAA,GAAAC,EAAA,EAAAA,EAAAX,UAAAY,OAAAD,IAAAD,EAAAC,GAAAX,UAAAW,GACxBjC,IACLA,GAAI,EACAa,OAAOsB,IAAI,gBAAkBH,EAAI,GAAGI,SAAS,cAC/CnB,SAASoB,QAAQN,aAAa,GAChC/B,GAAI,KAEoCS,KAAK6B,IAAIC,OAAO,eACtDC,UACF,mBACA,yBACA,+BACA,WACEvB,SAASoB,QAAQN,aAAa,MAKpCZ,EAAAR,UAAA8B,KAAA,aAGAtB,EAAAR,UAAA+B,OAAA,aAEFvB,EAhCA,CAAyCL,gBAAA6B,QAkCzC,SAASd,aACPhB,OAAO+B,OACP/B,OAAOgC,YAAY,eAAe,GAClChC,OAAOiC,OALTC,QAAA,QAAA5B","file":"mcscript_base.js","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar pluginmanager_1 = require(\"@mcscriptstudiocode/pluginmanager\");\nvar Config_1 = require(\"@mcscriptstudiocode/Config\");\nvar mcscript = require(\"mcscript\");\nvar fs = require(\"fs\");\nvar config;\nvar Shortcutbar = /** @class */ (function (_super) {\n    __extends(Shortcutbar, _super);\n    function Shortcutbar() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Shortcutbar.prototype.setup = function () {\n    };\n    Shortcutbar.prototype.start = function () {\n        config = new Config_1.Config(__dirname + \"/config.yml\", Config_1.FileFormatters.Yaml);\n        loadConfig();\n        var b = true;\n        fs.watch(working_dir, function () {\n            var arg = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                arg[_i] = arguments[_i];\n            }\n            if (!b)\n                return;\n            b = false;\n            if (config.get(\"autocompile\") && arg[1].endsWith(\".mcscript\"))\n                mcscript.compile(working_dir, true);\n            b = true;\n        });\n        var api = this.api.getAPI(\"shortcutbar\");\n        api.addButton(\"mcscript_compile\", \"compile mcscript files\", \"<i class=\\\"mdi mdi-play\\\"></i>\", function () {\n            mcscript.compile(working_dir, true);\n        });\n    };\n    Shortcutbar.prototype.stop = function () {\n    };\n    Shortcutbar.prototype.reload = function () {\n    };\n    return Shortcutbar;\n}(pluginmanager_1.Plugin));\nexports[\"default\"] = Shortcutbar;\nfunction loadConfig() {\n    config.load();\n    config.setStandart(\"autocompile\", true);\n    config.save();\n}\n","import { Plugin } from \"@mcscriptstudiocode/pluginmanager\";\r\nimport { Config, FileFormatters } from \"@mcscriptstudiocode/Config\";\r\nimport { ShortcutbarAPI } from \"@mcscriptstudiocodeplugins/shortcutbar\";\r\ndeclare let working_dir: string;\r\n\r\nimport * as mcscript from \"mcscript\";\r\nimport * as fs from \"fs\";\r\n\r\nlet config: Config;\r\n\r\nexport default class Shortcutbar extends Plugin {\r\n\r\n  setup() {\r\n  }\r\n\r\n  start() {\r\n    config = new Config(`${__dirname}/config.yml`, FileFormatters.Yaml);\r\n    loadConfig();\r\n    let b: boolean = true;\r\n    fs.watch(working_dir, function(...arg) {\r\n      if (!b) return;\r\n      b = false;\r\n      if (config.get(\"autocompile\") && arg[1].endsWith(\".mcscript\"))\r\n        mcscript.compile(working_dir, true);\r\n      b = true;\r\n    });\r\n    let api: ShortcutbarAPI = <ShortcutbarAPI>this.api.getAPI(\"shortcutbar\");\r\n    api.addButton(\r\n      \"mcscript_compile\",\r\n      \"compile mcscript files\",\r\n      `<i class=\"mdi mdi-play\"></i>`,\r\n      function() {\r\n        mcscript.compile(working_dir, true);\r\n      }\r\n    );\r\n  }\r\n\r\n  stop() {\r\n  }\r\n\r\n  reload() {\r\n  }\r\n}\r\n\r\nfunction loadConfig() {\r\n  config.load();\r\n  config.setStandart(\"autocompile\", true);\r\n  config.save();\r\n}\r\n"]}