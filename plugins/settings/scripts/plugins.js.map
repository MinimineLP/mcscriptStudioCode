{"version":3,"sources":["plugins.js","plugins.ts"],"names":["exports","__esModule","SettingsAPI_1","require","pluginmanager_1","util_1","$","fs","marked","api","PluginManager","instance","createInfoTableEntry","key","value","name","document","createElement","innerText","appendChild","createConfigEditor","plugin","textareaid","savebuttonid","guid","existsSync","path","div","config","save","h3","classList","add","readFileSync","id","createReadmeViewer","content","html","cont","innerHTML","settingsapi","push","renderContent","main","ul","style","display","plugins","forEach","li","p","infos","table","url","version","author","author_url","configid","configSaveId","readme","click","hide","show","empty","append","editor_1","getAPI","createEditor","getElementById","e","preventDefault","writeFileSync","getValue"],"mappings":"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","file":"plugins.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar SettingsAPI_1 = require(\"./SettingsAPI\");\nvar pluginmanager_1 = require(\"@mcscriptstudiocode/pluginmanager\");\nvar util_1 = require(\"@mcscriptstudiocode/util\");\nvar $ = require(\"jquery\");\nvar fs = require(\"fs\");\nvar marked = require(\"marked\");\nvar api = pluginmanager_1.PluginManager.instance.api;\nSettingsAPI_1.settingsapi.push({\n    name: \"plugins\",\n    renderContent: function () {\n        var main = document.createElement(\"div\");\n        var ul = document.createElement(\"ul\");\n        var cont = document.createElement(\"div\");\n        cont.style.display = \"none\";\n        main.id = \"settings_plugins\";\n        ul.classList.add(\"settings_plugins\", \"menu\");\n        cont.classList.add(\"settings_plugins\", \"content\");\n        api.plugins.forEach(function (plugin) {\n            var li = document.createElement(\"li\");\n            var p = document.createElement(\"p\");\n            var infos = document.createElement(\"div\");\n            var h3 = document.createElement(\"h3\");\n            var table = document.createElement(\"table\");\n            infos.classList.add(\"infos\");\n            table.classList.add(\"infostable\");\n            h3.classList.add(\"infoheadline\");\n            h3.innerText = \"Infos\";\n            table.appendChild(createInfoTableEntry(\"Name\", \"\" + plugin.name));\n            table.appendChild(createInfoTableEntry(\"Url\", \"\" + plugin.url));\n            table.appendChild(createInfoTableEntry(\"Version\", \"v\" + plugin.version));\n            table.appendChild(createInfoTableEntry(\"Author\", \"\" + plugin.author));\n            table.appendChild(createInfoTableEntry(\"Author's url\", \"\" + plugin.author_url));\n            infos.appendChild(h3);\n            infos.appendChild(table);\n            p.innerText = plugin.name;\n            li.appendChild(p);\n            var configid = util_1.guid();\n            var configSaveId = util_1.guid();\n            var config = createConfigEditor(plugin, configid, configSaveId);\n            var readme = createReadmeViewer(plugin);\n            $(li).click(function () {\n                $(ul).hide();\n                $(cont).show();\n                $(cont).empty();\n                $(cont).append(infos);\n                if (config) {\n                    $(cont).append(config);\n                    var editor_1 = (api\n                        .getAPI(\"editor\"))\n                        .createEditor(document.getElementById(configid), \"text/x-yaml\", \"3024-night\");\n                    $(\"#\" + configSaveId).click(function (e) {\n                        e.preventDefault();\n                        fs.writeFileSync(plugin.path + \"/config.yml\", editor_1.getValue(), \"utf8\");\n                        return false;\n                    });\n                }\n                if (readme)\n                    $(cont).append(readme);\n            });\n            ul.appendChild(li);\n        });\n        main.appendChild(ul);\n        main.appendChild(cont);\n        return main;\n    }\n});\nfunction createInfoTableEntry(key, value) {\n    var name = [];\n    name[0] = document.createElement(\"tr\");\n    name[1] = document.createElement(\"th\");\n    name[2] = document.createElement(\"th\");\n    name[1].innerText = key;\n    name[2].innerText = value;\n    name[0].appendChild(name[1]);\n    name[0].appendChild(name[2]);\n    return name[0];\n}\nfunction createConfigEditor(plugin, textareaid, savebuttonid) {\n    if (textareaid === void 0) { textareaid = util_1.guid(); }\n    if (savebuttonid === void 0) { savebuttonid = util_1.guid(); }\n    if (!fs.existsSync(plugin.path + \"/config.yml\"))\n        return;\n    var div = document.createElement(\"div\");\n    var config = document.createElement(\"textarea\");\n    var save = document.createElement(\"button\");\n    var h3 = document.createElement(\"h3\");\n    div.classList.add(\"config\");\n    h3.innerText = \"Config\";\n    config.value = fs.readFileSync(plugin.path + \"/config.yml\", \"utf8\");\n    config.id = textareaid;\n    save.innerText = \"Save\";\n    save.id = savebuttonid;\n    div.appendChild(h3);\n    div.appendChild(config);\n    div.appendChild(save);\n    return div;\n}\nfunction createReadmeViewer(plugin) {\n    if (!fs.existsSync(plugin.path + \"/README.md\"))\n        return;\n    var content = fs.readFileSync(plugin.path + \"/README.md\", \"utf8\");\n    var html = marked(content);\n    var div = document.createElement(\"div\");\n    var cont = document.createElement(\"div\");\n    var h3 = document.createElement(\"h3\");\n    div.classList.add(\"readme\");\n    cont.classList.add(\"readme-content\");\n    h3.innerText = \"Readme\";\n    cont.innerHTML = html;\n    div.appendChild(cont);\n    return div;\n}\n","import { settingsapi } from \"./SettingsAPI\";\nimport {\n  PluginManager,\n  PluginApi,\n  Plugin\n} from \"@mcscriptstudiocode/pluginmanager\";\nimport { guid } from \"@mcscriptstudiocode/util\";\nimport * as $ from \"jquery\";\nimport * as fs from \"fs\";\nimport * as marked from \"marked\";\nlet api: PluginApi = PluginManager.instance.api;\n\nsettingsapi.push({\n  name: \"plugins\",\n  renderContent: function(): string | HTMLElement {\n    let main: HTMLDivElement = document.createElement(\"div\");\n    let ul: HTMLUListElement = document.createElement(\"ul\");\n    let cont: HTMLDivElement = document.createElement(\"div\");\n    cont.style.display = \"none\";\n    main.id = \"settings_plugins\";\n    ul.classList.add(\"settings_plugins\", \"menu\");\n    cont.classList.add(\"settings_plugins\", \"content\");\n    api.plugins.forEach((plugin: Plugin) => {\n      let li: HTMLLIElement = document.createElement(\"li\");\n      let p: HTMLParagraphElement = document.createElement(\"p\");\n      let infos: HTMLDivElement = document.createElement(\"div\");\n      let h3: HTMLElement = document.createElement(\"h3\");\n      let table: HTMLTableElement = document.createElement(\"table\");\n\n      infos.classList.add(\"infos\");\n      table.classList.add(\"infostable\");\n      h3.classList.add(\"infoheadline\");\n\n      h3.innerText = \"Infos\";\n\n      table.appendChild(createInfoTableEntry(\"Name\", \"\" + plugin.name));\n      table.appendChild(createInfoTableEntry(\"Url\", \"\" + plugin.url));\n      table.appendChild(createInfoTableEntry(\"Version\", \"v\" + plugin.version));\n      table.appendChild(createInfoTableEntry(\"Author\", \"\" + plugin.author));\n      table.appendChild(\n        createInfoTableEntry(\"Author's url\", \"\" + plugin.author_url)\n      );\n\n      infos.appendChild(h3);\n      infos.appendChild(table);\n\n      p.innerText = plugin.name;\n      li.appendChild(p);\n\n      let configid = guid();\n      let configSaveId = guid();\n      let config = createConfigEditor(plugin, configid, configSaveId);\n      let readme = createReadmeViewer(plugin);\n\n      $(li).click(() => {\n        $(ul).hide();\n        $(cont).show();\n        $(cont).empty();\n        $(cont).append(infos);\n        if (config) {\n          $(cont).append(config);\n          let editor = (<any>(api\n            .getAPI(\"editor\")))\n            .createEditor(\n              document.getElementById(configid),\n              \"text/x-yaml\",\n              \"3024-night\"\n            );\n          $(`#${configSaveId}`).click(e => {\n            e.preventDefault();\n            fs.writeFileSync(\n              `${plugin.path}/config.yml`,\n              editor.getValue(),\n              \"utf8\"\n            );\n            return false;\n          });\n        }\n        if (readme) $(cont).append(readme);\n      });\n      ul.appendChild(li);\n    });\n    main.appendChild(ul);\n    main.appendChild(cont);\n    return main;\n  }\n});\n\nfunction createInfoTableEntry(key: string, value: string): HTMLTableRowElement {\n  let name: HTMLElement[] = [];\n  name[0] = document.createElement(\"tr\");\n  name[1] = document.createElement(\"th\");\n  name[2] = document.createElement(\"th\");\n  name[1].innerText = key;\n  name[2].innerText = value;\n  name[0].appendChild(name[1]);\n  name[0].appendChild(name[2]);\n  return <HTMLTableRowElement>name[0];\n}\n\nfunction createConfigEditor(\n  plugin: Plugin,\n  textareaid: string = guid(),\n  savebuttonid: string = guid()\n): HTMLDivElement {\n  if (!fs.existsSync(`${plugin.path}/config.yml`)) return;\n\n  let div: HTMLDivElement = document.createElement(\"div\");\n  let config: HTMLTextAreaElement = document.createElement(\"textarea\");\n  let save: HTMLButtonElement = document.createElement(\"button\");\n  let h3: HTMLElement = document.createElement(\"h3\");\n\n  div.classList.add(\"config\");\n  h3.innerText = \"Config\";\n  config.value = fs.readFileSync(`${plugin.path}/config.yml`, \"utf8\");\n  config.id = textareaid;\n\n  save.innerText = \"Save\";\n  save.id = savebuttonid;\n\n  div.appendChild(h3);\n  div.appendChild(config);\n  div.appendChild(save);\n\n  return div;\n}\n\nfunction createReadmeViewer(plugin: Plugin): HTMLDivElement {\n  if (!fs.existsSync(`${plugin.path}/README.md`)) return;\n  let content = fs.readFileSync(`${plugin.path}/README.md`, \"utf8\");\n  let html = marked(content);\n\n  let div: HTMLDivElement = document.createElement(\"div\");\n  let cont: HTMLDivElement = document.createElement(\"div\");\n  let h3: HTMLElement = document.createElement(\"h3\");\n\n  div.classList.add(\"readme\");\n  cont.classList.add(\"readme-content\");\n\n  h3.innerText = \"Readme\";\n  cont.innerHTML = html;\n\n  div.appendChild(cont);\n  return div;\n}\n"]}