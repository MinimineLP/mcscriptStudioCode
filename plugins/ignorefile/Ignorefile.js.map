{"version":3,"sources":["Ignorefile.js","Ignorefile.ts"],"names":["__extends","d","b","extendStatics","setPrototypeOf","Object","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","fs","require","pluginmanager_1","ignorefile","_super","apply","arguments","setup","start","api","getAPI","onReload","afterExplorerReload","stop","reload","Plugin","files","scan","ignore","keys","forEach","key","value","toLowerCase","content","readFileSync","split","replace","concat","filter","createFilter","testFilterMatch","parseIgnoreExpression","exp","RegExp","filters","i","push","string","test"],"mappings":"AAAA,aACA,IAAIA,UAAyC,WAAzCA,IAAAA,EAAa,SAAQC,EAAAC,GAG8D,OAF/EC,EAAAA,OAAgBC,gBAChBD,CAAAA,UAAgBE,cAAOD,OAClB,SAAEE,EAAWJ,GAAbD,EAAAK,UAA6BC,IAA2BN,SAAEK,EAAFJ,GAAA,IAAA,IAAAM,KAAAN,EAAAA,EAAAO,eAAAD,KAAAP,EAAAO,GAAAN,EAAAM,MACzCP,EAAAC,IAAmB,OAAA,SAAIA,EAAEO,GAAiC,SAF9EC,IAAAC,KAAAC,YAAAX,EAEsBE,EAAAF,EAAAC,GACtBD,EAAAY,UAAOV,OAAAA,EAAPE,OAAAS,OAAAZ,IAAAQ,EAAAG,UAAAX,EAAAW,UAAA,IAAAH,IALqC,GAQrCP,QAAAA,YAAAA,ECTR,IAAAY,GAAAC,QAAA,MACAC,gBAAAD,QAAA,qCAGAE,WAAA,SAAAC,GAAA,SAAAD,IDHA,OAAA,OAAAC,GAAAA,EAAAC,MAAAT,KAAAU,YAAAV,KCiBA,OAdwCX,UAAAkB,EAAAC,GAEtCD,EAAAL,UAAAS,MAAA,aAGAJ,EAAAL,UAAAU,MAAA,WACgBZ,KAAKa,IAAIC,OAAO,YAAaC,SAASC,sBAGtDT,EAAAL,UAAAe,KAAA,aAGAV,EAAAL,UAAAgB,OAAA,aAEFX,EAdA,CAAwCD,gBAAAa,QAgBxC,SAASH,oBAAoBI,GAqB3B,OAnBA,SAASC,EAAKD,EAAYE,GACxB5B,OAAO6B,KAAKH,GAAOI,QAAQ,SAASC,GAClC,IAAIC,EAAQN,EAAMK,GAClB,GAAyB,6BAArBA,EAAIE,cAA8C,CACpD,IAAIC,EAAUxB,GAAGyB,aAAaH,EAAO,QAEjCI,GADJF,EAAUA,EAAQG,QAAQ,KAAM,KACZD,MAAM,OAC1BR,EAASA,EAAOU,OAAOF,MAG3B,IAAIG,EAAmBC,aAAaZ,GACpC5B,OAAO6B,KAAKH,GAAOI,QAAQ,SAASC,GAClC,IAAIC,EAAQN,EAAMK,GACdU,gBAAgBF,EAAQR,WAAaL,EAAMK,GAC3CC,aAAiBhC,SACnBgC,EAAQL,EAAKK,EAAOJ,MAhB1BD,CAAKD,EAAO,IAoBLA,EAGT,SAASgB,sBAAsBC,GAwB7B,OAvBAA,EACE,IACAA,EACGN,QAAQ,KAAM,QACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,MACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACnBM,GAAO,IACA,IAAIC,OAAOD,GAGpB,SAASH,aAAaD,GACpB,IAAIM,EAAoB,GACxB,IAAK,IAAIC,KAAKP,EACZM,EAAQE,KAAKL,sBAAsBH,EAAOO,KAE5C,OAAOD,EAGT,SAASJ,gBAAgBF,EAAkBS,GACzC,IAAK,IAAIF,KAAKP,EACZ,GAAIA,EAAOO,GAAGG,KAAKD,GAAS,OAAO,EAErC,OAAO,EAtEPnC,QAAAA,QAAAL","file":"Ignorefile.js","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar fs = require(\"fs\");\nvar pluginmanager_1 = require(\"@mcscriptstudiocode/pluginmanager\");\nvar ignorefile = /** @class */ (function (_super) {\n    __extends(ignorefile, _super);\n    function ignorefile() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ignorefile.prototype.setup = function () {\n    };\n    ignorefile.prototype.start = function () {\n        this.api.getAPI(\"explorer\").onReload(afterExplorerReload);\n    };\n    ignorefile.prototype.stop = function () {\n    };\n    ignorefile.prototype.reload = function () {\n    };\n    return ignorefile;\n}(pluginmanager_1.Plugin));\nexports[\"default\"] = ignorefile;\nfunction afterExplorerReload(files) {\n    scan(files, []);\n    function scan(files, ignore) {\n        Object.keys(files).forEach(function (key) {\n            var value = files[key];\n            if (key.toLowerCase() == \".mcscriptstudiocodeignore\") {\n                var content = fs.readFileSync(value, \"utf8\");\n                content = content.replace(/\\r/, \"\");\n                var split = content.split(/\\n/g);\n                ignore = ignore.concat(split);\n            }\n        });\n        var filter = createFilter(ignore);\n        Object.keys(files).forEach(function (key) {\n            var value = files[key];\n            if (testFilterMatch(filter, key))\n                delete files[key];\n            if (value instanceof Object) {\n                value = scan(value, ignore);\n            }\n        });\n    }\n    return files;\n}\nfunction parseIgnoreExpression(exp) {\n    exp =\n        \"^\" +\n            exp\n                .replace(/\\\\/, \"\\\\\\\\\")\n                .replace(/\\./, \"\\\\.\")\n                .replace(/\\[/, \"\\\\[\")\n                .replace(/\\]/, \"\\\\]\")\n                .replace(/\\(/, \"\\\\]\")\n                .replace(/\\)/, \"\\\\]\")\n                .replace(/\\{/, \"\\\\]\")\n                .replace(/\\}/, \"\\\\]\")\n                .replace(/\\*/, \".*\")\n                .replace(/\\//, \"\\\\/\")\n                .replace(/\\^/, \"\\\\^\")\n                .replace(/\\$/, \"\\\\$\")\n                .replace(/\\?/, \"\\\\?\")\n                .replace(/\\+/, \"\\\\+\")\n                .replace(/\\=/, \"\\\\=\")\n                .replace(/\\|/, \"\\\\|\")\n                .replace(/\\,/, \"\\\\,\")\n                .replace(/\\=/, \"\\\\=\")\n                .replace(/\\=/, \"\\\\=\");\n    exp += \"$\";\n    return new RegExp(exp);\n}\nfunction createFilter(filter) {\n    var filters = [];\n    for (var i in filter) {\n        filters.push(parseIgnoreExpression(filter[i]));\n    }\n    return filters;\n}\nfunction testFilterMatch(filter, string) {\n    for (var i in filter) {\n        if (filter[i].test(string))\n            return true;\n    }\n    return false;\n}\n","import * as fs from \"fs\";\r\nimport { Plugin } from \"@mcscriptstudiocode/pluginmanager\";\r\nimport { ExplorerAPI } from \"@mcscriptstudiocodeplugins/explorer\";\r\n\r\nexport default class ignorefile extends Plugin {\r\n\r\n  setup() {\r\n  }\r\n\r\n  start() {\r\n    (<ExplorerAPI>this.api.getAPI(\"explorer\")).onReload(afterExplorerReload);\r\n  }\r\n\r\n  stop() {\r\n  }\r\n\r\n  reload() {\r\n  }\r\n}\r\n\r\nfunction afterExplorerReload(files) {\r\n  scan(files, []);\r\n  function scan(files: any, ignore: string[]): any {\r\n    Object.keys(files).forEach(function(key) {\r\n      let value = files[key];\r\n      if (key.toLowerCase() == \".mcscriptstudiocodeignore\") {\r\n        let content = fs.readFileSync(value, \"utf8\");\r\n        content = content.replace(/\\r/, \"\");\r\n        let split = content.split(/\\n/g);\r\n        ignore = ignore.concat(split);\r\n      }\r\n    });\r\n    let filter: RegExp[] = createFilter(ignore);\r\n    Object.keys(files).forEach(function(key) {\r\n      let value = files[key];\r\n      if (testFilterMatch(filter, key)) delete files[key];\r\n      if (value instanceof Object) {\r\n        value = scan(value, ignore);\r\n      }\r\n    });\r\n  }\r\n  return files;\r\n}\r\n\r\nfunction parseIgnoreExpression(exp: string): RegExp {\r\n  exp =\r\n    \"^\" +\r\n    exp\r\n      .replace(/\\\\/, \"\\\\\\\\\")\r\n      .replace(/\\./, \"\\\\.\")\r\n      .replace(/\\[/, \"\\\\[\")\r\n      .replace(/\\]/, \"\\\\]\")\r\n      .replace(/\\(/, \"\\\\]\")\r\n      .replace(/\\)/, \"\\\\]\")\r\n      .replace(/\\{/, \"\\\\]\")\r\n      .replace(/\\}/, \"\\\\]\")\r\n      .replace(/\\*/, \".*\")\r\n      .replace(/\\//, \"\\\\/\")\r\n      .replace(/\\^/, \"\\\\^\")\r\n      .replace(/\\$/, \"\\\\$\")\r\n      .replace(/\\?/, \"\\\\?\")\r\n      .replace(/\\+/, \"\\\\+\")\r\n      .replace(/\\=/, \"\\\\=\")\r\n      .replace(/\\|/, \"\\\\|\")\r\n      .replace(/\\,/, \"\\\\,\")\r\n      .replace(/\\=/, \"\\\\=\")\r\n      .replace(/\\=/, \"\\\\=\");\r\n  exp += \"$\";\r\n  return new RegExp(exp);\r\n}\r\n\r\nfunction createFilter(filter: string[]): RegExp[] {\r\n  let filters: RegExp[] = [];\r\n  for (let i in filter) {\r\n    filters.push(parseIgnoreExpression(filter[i]));\r\n  }\r\n  return filters;\r\n}\r\n\r\nfunction testFilterMatch(filter: RegExp[], string: string): boolean {\r\n  for (let i in filter) {\r\n    if (filter[i].test(string)) return true;\r\n  }\r\n  return false;\r\n}\r\n"]}