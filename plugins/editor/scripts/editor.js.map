{"version":3,"sources":["editor.js","editor.ts"],"names":["exports","__esModule","util_1","require","swal","$","fs","PATH","CodeMirror","Highlights","this","mcscript","mcfunction","mcmeta","json","md","js","html","yml","Editor","name","version","highlights","actual","undefined","opened","texteditors","THIS","window","keydown","event","ctrlKey","key","preventDefault","save","undo","redo","closeActual","prototype","createEditor","element","mode","theme","HTMLTextAreaElement","fromTextArea","tabSize","lineNumbers","firstLineNumber","extraKeys","Ctrl-Space","Alt-F","Ctrl-Q","cm","foldCode","getCursor","lineWrapping","foldGutter","gutters","scrollbarStyle","fromDiv","getMode","ending","editor","close","open","path","cont","readFileSync","toString","basename","hide","removeClass","append","frame","aw","match","div","edit","type","writeFileSync","getDoc","getValue","content","id","val","el","remove","reloadEditors","includes","indexOf","parent","hasClass","title","text","icon","buttons","continue","cancel","dangerMode","then","res","click","addClass","show","children","on","push","value","id_1","guid","area","document","getElementById","getAttribute","F11","setOption","getOption","Esc","n","marker","info","lineInfo","setGutterMarker","gutterMarkers","createElement","style","color","innerHTML","id2","not","attr","setInterval","_i","_a","length","ready","each","height"],"mappings":"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","file":"editor.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar util_1 = require(\"@mcscriptstudiocode/util\");\nvar swal = require(\"sweetalert\");\nvar $ = require(\"jquery\");\nvar fs = require(\"fs\");\nvar PATH = require(\"path\");\nvar CodeMirror = require(\"codemirror\");\nvar Highlights = /** @class */ (function () {\n    function Highlights() {\n        this.mcscript = \"mcscript\";\n        this.mcfunction = \"mcfunction\";\n        this.mcmeta = \"application/ld+json\";\n        this.json = \"application/ld+json\";\n        this.md = \"gfm\";\n        this.js = \"javascript\";\n        this.html = \"htmlmixed\";\n        this.yml = \"text/x-yaml\";\n    }\n    return Highlights;\n}());\nvar Editor = /** @class */ (function () {\n    function Editor() {\n        this.name = \"Editor\";\n        this.version = \"0.0.1\";\n        this.highlights = new Highlights();\n        this.actual = undefined;\n        this.opened = {};\n        this.texteditors = [];\n        var THIS = this;\n        $(window).keydown(function (event) {\n            if (event.ctrlKey)\n                switch (event.key) {\n                    case \"s\":\n                        event.preventDefault();\n                        THIS.save();\n                        break;\n                    case \"z\":\n                        event.preventDefault();\n                        THIS.undo();\n                        break;\n                    case \"y\":\n                        event.preventDefault();\n                        THIS.redo();\n                        break;\n                    case \"w\":\n                        event.preventDefault();\n                        THIS.closeActual();\n                        break;\n                }\n        });\n    }\n    Editor.prototype.createEditor = function (element, mode, theme) {\n        if (mode === void 0) { mode = \"mcscript\"; }\n        if (theme === void 0) { theme = \"default\"; }\n        var editor;\n        if (element instanceof HTMLTextAreaElement)\n            editor = CodeMirror.fromTextArea(element, {\n                mode: mode,\n                tabSize: 2,\n                lineNumbers: true,\n                firstLineNumber: 1,\n                extraKeys: {\n                    \"Ctrl-Space\": \"autocomplete\",\n                    \"Alt-F\": \"findPersistent\",\n                    \"Ctrl-Q\": function (cm) {\n                        cm.foldCode(cm.getCursor());\n                    }\n                },\n                lineWrapping: true,\n                foldGutter: true,\n                gutters: [\n                    \"CodeMirror-linenumbers\",\n                    \"breakpoints\",\n                    \"CodeMirror-foldgutter\"\n                ],\n                scrollbarStyle: \"simple\",\n                theme: theme\n            });\n        else\n            editor = CodeMirror.fromDiv(element, {\n                mode: mode,\n                tabSize: 2,\n                lineNumbers: true,\n                firstLineNumber: 1,\n                extraKeys: {\n                    \"Ctrl-Space\": \"autocomplete\",\n                    \"Alt-F\": \"findPersistent\",\n                    \"Ctrl-Q\": function (cm) {\n                        cm.foldCode(cm.getCursor());\n                    }\n                },\n                lineWrapping: true,\n                foldGutter: true,\n                gutters: [\n                    \"CodeMirror-linenumbers\",\n                    \"breakpoints\",\n                    \"CodeMirror-foldgutter\"\n                ],\n                scrollbarStyle: \"simple\",\n                theme: theme\n            });\n        return editor;\n    };\n    Editor.prototype.getMode = function (ending) {\n        if (editor.highlights[ending])\n            return editor.highlights[ending];\n        return ending;\n    };\n    Editor.prototype.save = function () {\n        if (editor.actual)\n            editor.opened[editor.actual].save();\n        // @ts-ignore\n        else\n            swal(\"Nothing to save!\", \"Sorry, but there is nothing to save, please select a file!\", \"error\");\n    };\n    Editor.prototype.undo = function () {\n        if (editor.actual)\n            editor.opened[editor.actual].editor.undo();\n    };\n    Editor.prototype.redo = function () {\n        if (editor.actual)\n            editor.opened[editor.actual].editor.redo();\n    };\n    Editor.prototype.closeActual = function () {\n        if (editor.actual)\n            editor.opened[editor.actual].close();\n        // @ts-ignore\n        else\n            swal(\"Nothing to close!\", \"Sorry, but there is nothing to close!\", \"error\");\n    };\n    Editor.prototype.open = function (path) {\n        if (editor.opened[path])\n            return false;\n        var cont = fs.readFileSync(path).toString();\n        var name = PATH.basename(path);\n        $(\"#editorcontainer .CodeMirror\").hide();\n        $(\"#editorcontainer .MineEditor\").hide();\n        $(\"#editorfiles div.openedfile.selected\").removeClass(\"selected\");\n        $(\"#editorfiles #editorfilescontainer\").append(\"<div class=\\\"openedfile selected\\\" path=\\\"\" + path + \"\\\"><p>\" + name + \"</p><i class=\\\"material-icons close\\\">close</i></div>\");\n        editor.actual = path;\n        var mode = editor.getMode(path.match(/[^.]*$/)[0]);\n        var aw = createEditor(mode, cont);\n        var div = aw.div;\n        var edit = aw.editor;\n        var type = aw.type;\n        var frame;\n        aw.save = function () {\n            if (type == \"code\") {\n                fs.writeFileSync(path, edit.getDoc().getValue());\n                editor.opened[path].content = edit.getDoc().getValue();\n                frame.removeClass(\"edited\");\n            }\n            else if (type == \"text\") {\n                fs.writeFileSync(path, $(\"#\" + editor.opened[path].id).val());\n                editor.opened[path].content = $(\"#\" + editor.opened[path].id).val();\n                frame.removeClass(\"edited\");\n                // @ts-ignore\n                swal(\"Successfully saved!\", \"File successfully saved to \\\"\" + path + \"\\\"\", \"success\");\n            }\n        };\n        var el = $(\"div#editorfilescontainer div.selected\");\n        aw.close = function () {\n            var close = function () {\n                if (path == editor.actual)\n                    editor.actual = undefined;\n                $(el).remove();\n                $(div).remove();\n                $(\"#\" + editor.opened[path].id).remove();\n                reloadEditors();\n                // @ts-ignore\n                if (editor.texteditors.includes(path))\n                    delete editor.texteditors[editor.texteditors.indexOf(path)];\n                delete editor.opened[path];\n                return false;\n            };\n            if ($(this)\n                .parent()\n                .hasClass(\"edited\")) {\n                // @ts-ignore\n                swal({\n                    title: \"Warning!\",\n                    text: \"editor file has unsaved edits. If you close it, the edits will be lost forever! Do you realy want to close it?\",\n                    icon: \"warning\",\n                    buttons: {\n                        save: \"Save\",\n                        \"continue\": \"Save not\",\n                        cancel: \"Cancel\"\n                    },\n                    dangerMode: true\n                }).then(function (res) {\n                    if (res == \"save\") {\n                        editor.opened[path].save();\n                        close;\n                    }\n                    if (res == \"continue\") {\n                        close();\n                    }\n                });\n            }\n            else\n                close();\n        };\n        frame = $(\"#editorfiles div.selected\");\n        aw.frame = frame;\n        editor.opened[path] = aw;\n        $(\"#editorfiles div.selected\")\n            .click(function () {\n            $(\"#editorfiles div.openedfile.selected\").removeClass(\"selected\");\n            $(this).addClass(\"selected\");\n            editor.actual = path;\n            $(\"#editorcontainer .CodeMirror\").hide();\n            $(\"#editorcontainer .MineEditor\").hide();\n            $(div).show();\n        })\n            .children(\"i.close\")\n            .click(aw.close);\n        if (aw.type == \"code\") {\n            edit.on(\"change\", function () {\n                if (editor.opened[path].content != edit.getDoc().getValue())\n                    frame.addClass(\"edited\");\n                else\n                    frame.removeClass(\"edited\");\n            });\n        }\n        else if (aw.type == \"text\") {\n            editor.texteditors.push(path);\n        }\n    };\n    return Editor;\n}());\nexports.Editor = Editor;\n(function () {\n    setInterval(function () {\n        if (editor.actual)\n            for (var _i = 0, _a = editor.texteditors; _i < _a.length; _i++) {\n                var path = _a[_i];\n                if (editor.opened[path].content != $(\"#\" + editor.opened[path].id).val())\n                    editor.opened[path].frame.addClass(\"edited\");\n                else\n                    editor.opened[path].frame.removeClass(\"edited\");\n            }\n    }, 1);\n})();\n$(document).ready(function () {\n    setInterval(function () {\n        $(\"#editorcontainer .MineEditor .MineEditor-canvas\").each(function () {\n            $(this).height($(this)\n                .parent()\n                .height() -\n                $(this)\n                    .parent()\n                    .children(\".MineEditor-menuebar\")\n                    .height() -\n                $(this)\n                    .parent()\n                    .children(\".MineEditor-bottom\")\n                    .height() -\n                44);\n        });\n    }, 10);\n    $(\"#editorcontainer .CodeMirror\").hide();\n    $(\"#editorcontainer .MineEditor\").hide();\n});\nfunction createEditor(mode, value) {\n    if (mode == \"htmlmixed\") {\n        var id_1 = util_1.guid();\n        $(\"#editorcontainer\").append(\"<textarea id=\\\"\" + id_1 + \"\\\" class=\\\"editor\\\">\" + value + \"</textarea>\");\n        reloadEditors();\n        var area = document.getElementById(id_1);\n        return {\n            editor: area,\n            id: id_1,\n            content: value,\n            type: \"text\",\n            div: document.getElementById(area.getAttribute(\"editor\"))\n        };\n    }\n    var id = util_1.guid();\n    $(\"#editorcontainer\").append(\"<textarea id=\\\"\" + id + \"\\\">\" + value + \"</textarea>\");\n    var editor = CodeMirror.fromTextArea(document.getElementById(id), {\n        mode: mode,\n        tabSize: 2,\n        lineNumbers: true,\n        firstLineNumber: 1,\n        extraKeys: {\n            \"Ctrl-Space\": \"autocomplete\",\n            \"Alt-F\": \"findPersistent\",\n            F11: function (cm) {\n                cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n            },\n            Esc: function (cm) {\n                if (cm.getOption(\"fullScreen\"))\n                    cm.setOption(\"fullScreen\", false);\n            },\n            \"Ctrl-Q\": function (cm) {\n                cm.foldCode(cm.getCursor());\n            }\n        },\n        lineWrapping: true,\n        foldGutter: true,\n        gutters: [\n            \"CodeMirror-linenumbers\",\n            \"breakpoints\",\n            \"CodeMirror-foldgutter\"\n        ],\n        scrollbarStyle: \"simple\",\n        theme: \"mtheme\"\n    });\n    // @ts-ignore\n    editor.on(\"gutterClick\", function (cm, n) {\n        var info = cm.lineInfo(n);\n        cm.setGutterMarker(n, \"breakpoints\", info.gutterMarkers ? null : makeMarker());\n    });\n    function makeMarker() {\n        var marker = document.createElement(\"div\");\n        marker.style.color = \"#822\";\n        marker.innerHTML = '<font color=\"red\">&bull;</font>';\n        return marker;\n    }\n    var id2 = util_1.guid();\n    $(\"#editorcontainer .CodeMirror\")\n        .not(\".hasid\")\n        .attr(\"id\", id2);\n    $(\"#editorcontainer .CodeMirror\")\n        .not(\".hasid\")\n        .addClass(\"hasid\");\n    $(\"#id\").remove();\n    // @ts-ignore\n    value = editor.getDoc().getValue();\n    return {\n        editor: editor,\n        id: id,\n        div: document.getElementById(id2),\n        content: value,\n        type: \"code\"\n    };\n}\nvar editor = new Editor();\nexports.editor = editor;\nexports[\"default\"] = editor;\n","declare function reloadEditors(): void;\n\nimport { guid } from \"@mcscriptstudiocode/util\";\nimport { Api } from \"@mcscriptstudiocode/pluginmanager\";\nimport * as swal from \"sweetalert\";\nimport * as $ from \"jquery\";\nimport * as fs from \"fs\";\nimport * as PATH from \"path\";\nimport * as CodeMirror from \"codemirror\";\n\nclass Highlights {\n  mcscript: string = \"mcscript\";\n  mcfunction: string = \"mcfunction\";\n  mcmeta: string = \"application/ld+json\";\n  json: string = \"application/ld+json\";\n  md: string = \"gfm\";\n  js: string = \"javascript\";\n  html: string = \"htmlmixed\";\n  yml: string = \"text/x-yaml\";\n}\n\nclass Editor implements Api {\n\n  name:string = \"Editor\";\n  version:string = \"0.0.1\";\n  highlights: Highlights = new Highlights();\n  actual: string = undefined;\n  opened: any = {};\n  texteditors: any[] = [];\n\n  constructor() {\n    let THIS = this;\n    $(window).keydown(function(event) {\n      if (event.ctrlKey)\n        switch (event.key) {\n          case \"s\":\n            event.preventDefault();\n            THIS.save();\n            break;\n          case \"z\":\n            event.preventDefault();\n            THIS.undo();\n            break;\n          case \"y\":\n            event.preventDefault();\n            THIS.redo();\n            break;\n          case \"w\":\n            event.preventDefault();\n            THIS.closeActual();\n            break;\n        }\n    });\n  }\n\n  createEditor(\n    element: HTMLTextAreaElement | HTMLDivElement,\n    mode: string = \"mcscript\",\n    theme = \"default\"\n  ) {\n    let editor;\n    if (element instanceof HTMLTextAreaElement)\n      editor = CodeMirror.fromTextArea(element, {\n        mode: mode,\n        tabSize: 2,\n        lineNumbers: true,\n        firstLineNumber: 1,\n        extraKeys: {\n          \"Ctrl-Space\": \"autocomplete\",\n          \"Alt-F\": \"findPersistent\",\n          \"Ctrl-Q\": function(cm) {\n            cm.foldCode(cm.getCursor());\n          }\n        },\n        lineWrapping: true,\n        foldGutter: true,\n        gutters: [\n          \"CodeMirror-linenumbers\",\n          \"breakpoints\",\n          \"CodeMirror-foldgutter\"\n        ],\n        scrollbarStyle: \"simple\",\n        theme: theme\n      });\n    else\n      editor = CodeMirror.fromDiv(element, {\n        mode: mode,\n        tabSize: 2,\n        lineNumbers: true,\n        firstLineNumber: 1,\n        extraKeys: {\n          \"Ctrl-Space\": \"autocomplete\",\n          \"Alt-F\": \"findPersistent\",\n          \"Ctrl-Q\": function(cm) {\n            cm.foldCode(cm.getCursor());\n          }\n        },\n        lineWrapping: true,\n        foldGutter: true,\n        gutters: [\n          \"CodeMirror-linenumbers\",\n          \"breakpoints\",\n          \"CodeMirror-foldgutter\"\n        ],\n        scrollbarStyle: \"simple\",\n        theme: theme\n      });\n    return editor;\n  }\n\n  getMode(ending) {\n    if (editor.highlights[ending]) return editor.highlights[ending];\n    return ending;\n  }\n\n  save() {\n    if (editor.actual) editor.opened[editor.actual].save();\n    // @ts-ignore\n    else swal(\n        \"Nothing to save!\",\n        `Sorry, but there is nothing to save, please select a file!`,\n        \"error\"\n      );\n  }\n\n  undo() {\n    if (editor.actual) editor.opened[editor.actual].editor.undo();\n  }\n\n  redo() {\n    if (editor.actual) editor.opened[editor.actual].editor.redo();\n  }\n\n  closeActual(): void {\n    if (editor.actual) editor.opened[editor.actual].close();\n    // @ts-ignore\n    else swal(\n        \"Nothing to close!\",\n        `Sorry, but there is nothing to close!`,\n        \"error\"\n      );\n  }\n\n  open(path) {\n    if (editor.opened[path]) return false;\n    let cont: string = fs.readFileSync(path).toString();\n    let name: string = PATH.basename(path);\n\n    $(\"#editorcontainer .CodeMirror\").hide();\n    $(\"#editorcontainer .MineEditor\").hide();\n    $(\"#editorfiles div.openedfile.selected\").removeClass(\"selected\");\n    $(\"#editorfiles #editorfilescontainer\").append(\n      `<div class=\"openedfile selected\" path=\"${path}\"><p>${name}</p><i class=\"material-icons close\">close</i></div>`\n    );\n\n    editor.actual = path;\n\n    let mode = editor.getMode(path.match(/[^.]*$/)[0]);\n    let aw: any = createEditor(mode, cont);\n    let div = aw.div;\n    let edit = aw.editor;\n    let type = aw.type;\n    let frame;\n\n    aw.save = function() {\n      if (type == \"code\") {\n        fs.writeFileSync(path, edit.getDoc().getValue());\n        editor.opened[path].content = edit.getDoc().getValue();\n        frame.removeClass(\"edited\");\n      } else if (type == \"text\") {\n        fs.writeFileSync(path, $(`#${editor.opened[path].id}`).val());\n        editor.opened[path].content = $(`#${editor.opened[path].id}`).val();\n        frame.removeClass(\"edited\");\n        // @ts-ignore\n        swal(\n          \"Successfully saved!\",\n          `File successfully saved to \"${path}\"`,\n          \"success\"\n        );\n      }\n    };\n\n    let el = $(\"div#editorfilescontainer div.selected\");\n\n    aw.close = function() {\n      let close = function() {\n        if (path == editor.actual) editor.actual = undefined;\n        $(el).remove();\n        $(div).remove();\n        $(`#${editor.opened[path].id}`).remove();\n        reloadEditors();\n\n        // @ts-ignore\n        if (editor.texteditors.includes(path))\n          delete editor.texteditors[editor.texteditors.indexOf(path)];\n        delete editor.opened[path];\n        return false;\n      };\n\n      if (\n        $(this)\n          .parent()\n          .hasClass(\"edited\")\n      ) {\n        // @ts-ignore\n        swal({\n          title: \"Warning!\",\n          text:\n            \"editor file has unsaved edits. If you close it, the edits will be lost forever! Do you realy want to close it?\",\n          icon: \"warning\",\n          buttons: {\n            save: \"Save\",\n            continue: \"Save not\",\n            cancel: \"Cancel\"\n          },\n          dangerMode: true\n        }).then(res => {\n          if (res == \"save\") {\n            editor.opened[path].save();\n            close;\n          }\n          if (res == \"continue\") {\n            close();\n          }\n        });\n      } else close();\n    };\n\n    frame = $(\"#editorfiles div.selected\");\n\n    aw.frame = frame;\n    editor.opened[path] = aw;\n\n    $(\"#editorfiles div.selected\")\n      .click(function() {\n        $(\"#editorfiles div.openedfile.selected\").removeClass(\"selected\");\n        $(this).addClass(\"selected\");\n        editor.actual = path;\n        $(\"#editorcontainer .CodeMirror\").hide();\n        $(\"#editorcontainer .MineEditor\").hide();\n        $(div).show();\n      })\n      .children(\"i.close\")\n      .click(aw.close);\n\n    if (aw.type == \"code\") {\n      edit.on(\"change\", function() {\n        if (editor.opened[path].content != edit.getDoc().getValue())\n          frame.addClass(\"edited\");\n        else frame.removeClass(\"edited\");\n      });\n    } else if (aw.type == \"text\") {\n      editor.texteditors.push(path);\n    }\n  }\n}\n\n(function() {\n  setInterval(function() {\n    if (editor.actual)\n      for (let path of editor.texteditors) {\n        if (\n          editor.opened[path].content != $(`#${editor.opened[path].id}`).val()\n        )\n          editor.opened[path].frame.addClass(\"edited\");\n        else editor.opened[path].frame.removeClass(\"edited\");\n      }\n  }, 1);\n})();\n\n$(document).ready(function() {\n  setInterval(function() {\n    $(\"#editorcontainer .MineEditor .MineEditor-canvas\").each(function() {\n      $(this).height(\n        $(this)\n          .parent()\n          .height() -\n          $(this)\n            .parent()\n            .children(\".MineEditor-menuebar\")\n            .height() -\n          $(this)\n            .parent()\n            .children(\".MineEditor-bottom\")\n            .height() -\n          44\n      );\n    });\n  }, 10);\n\n  $(\"#editorcontainer .CodeMirror\").hide();\n  $(\"#editorcontainer .MineEditor\").hide();\n});\n\nfunction createEditor(mode, value): EditorCreateAnswer {\n  if (mode == \"htmlmixed\") {\n    let id = guid();\n    $(\"#editorcontainer\").append(\n      `<textarea id=\"${id}\" class=\"editor\">${value}</textarea>`\n    );\n    reloadEditors();\n    let area = document.getElementById(id);\n    return {\n      editor: area,\n      id: id,\n      content: value,\n      type: \"text\",\n      div: <HTMLDivElement>document.getElementById(area.getAttribute(\"editor\"))\n    };\n  }\n\n  let id = guid();\n  $(\"#editorcontainer\").append(`<textarea id=\"${id}\">${value}</textarea>`);\n\n  let editor = CodeMirror.fromTextArea(\n    <HTMLTextAreaElement>document.getElementById(id),\n    {\n      mode: mode,\n      tabSize: 2,\n      lineNumbers: true,\n      firstLineNumber: 1,\n      extraKeys: {\n        \"Ctrl-Space\": \"autocomplete\",\n        \"Alt-F\": \"findPersistent\",\n        F11: function(cm) {\n          cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n        },\n        Esc: function(cm) {\n          if (cm.getOption(\"fullScreen\")) cm.setOption(\"fullScreen\", false);\n        },\n\n        \"Ctrl-Q\": function(cm) {\n          cm.foldCode(cm.getCursor());\n        }\n      },\n      lineWrapping: true,\n      foldGutter: true,\n      gutters: [\n        \"CodeMirror-linenumbers\",\n        \"breakpoints\",\n        \"CodeMirror-foldgutter\"\n      ],\n      scrollbarStyle: \"simple\",\n      theme: \"mtheme\"\n    }\n  );\n\n  // @ts-ignore\n  editor.on(\"gutterClick\", function(cm, n) {\n    var info = cm.lineInfo(n);\n    cm.setGutterMarker(\n      n,\n      \"breakpoints\",\n      info.gutterMarkers ? null : makeMarker()\n    );\n  });\n\n  function makeMarker() {\n    var marker = document.createElement(\"div\");\n    marker.style.color = \"#822\";\n    marker.innerHTML = '<font color=\"red\">&bull;</font>';\n    return marker;\n  }\n\n  let id2 = guid();\n  $(\"#editorcontainer .CodeMirror\")\n    .not(\".hasid\")\n    .attr(\"id\", id2);\n  $(\"#editorcontainer .CodeMirror\")\n    .not(\".hasid\")\n    .addClass(\"hasid\");\n  $(\"#id\").remove();\n\n  // @ts-ignore\n  value = editor.getDoc().getValue();\n\n  return {\n    editor: editor,\n    id: id,\n    div: <HTMLDivElement>document.getElementById(id2),\n    content: value,\n    type: \"code\"\n  };\n}\n\ninterface EditorCreateAnswer {\n  editor: any;\n  id: string;\n  div: HTMLDivElement;\n  content: string;\n  type: \"code\" | \"text\";\n}\n\nlet editor = new Editor();\n\nexport default editor;\nexport { editor, Editor };\n"]}